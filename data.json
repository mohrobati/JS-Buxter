[
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 2 * 1e5 + 10\nvar mod = 1e9 + 7\n \nfunction main() {\n  const xx = readline();\n  Array(Number(xx)).fill(1).map((t, i) => {\n    var n = parseInt(readline());\n    // var [n, k] = readline().split(' ').map((x, iii) => {\n    //   return parseInt(x)\n    // })\n    var a = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n    var res = a[0]\n    var met = false\n    for (let j = 1; j < n ; j++) {\n      res = res ^ a[j]\n    }\n \n    if (res === 0) return console.log('YES')\n    var count = 0\n \n    var aa = 0\n    for (let j = 0; j < n; j++) {\n      aa = a[j] ^aa\n      if(aa === res) {\n        count++\n        aa = 0\n      }\n    }\n    if (count>=3) return console.log('YES')\n    console.log('NO')\n  })\n}\n ",
        "tests": [
            {
                "input": "2\r\n3\r\n0 2 2\r\n4\r\n2 3 1 10\r\n",
                "output": "YES\nNO\n"
            },
            {
                "input": "15\r\n2\r\n660632533 660632533\r\n2\r\n774306959 774306959\r\n2\r\n971739496 784083784\r\n2\r\n775353256 672614891\r\n2\r\n403290217 403290217\r\n2\r\n651261320 651261320\r\n2\r\n894672621 894672621\r\n2\r\n46281693 620415865\r\n2\r\n92929999 409128591\r\n2\r\n26890011 630323358\r\n2\r\n443724284 443724284\r\n2\r\n308822599 308822599\r\n2\r\n895967167 895967167\r\n2\r\n278739659 278739659\r\n2\r\n899274539 899274539\r\n",
                "output": "YES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nYES\nYES\nYES\nYES\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 2 * 1e5 + 10\nvar mod = 1e9 + 7\n \nfunction main() {\n  // const xx = readline();\n  // Array(Number(xx)).fill(1).map((t, i) => {\n  var n = parseInt(readline());\n  // var [n, k] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n  var a = readline().split(' ').map((x, iii) => {\n    return {value: parseInt(x), index: iii}\n  });\n  a.sort((a, b) => a.value - b.value)\n  // console.log(partition(a, n))\n  if (!partition(a)) return console.log(0)\n  var copy = []\n  for (let i = 0; i < n; i++) {\n    copy = []\n    for (let j = 0; j < n; j++) {\n      if (j !== i) copy.push(a[j])\n    }\n    // console.log(copy)\n    if (!partition(copy)) {\n      console.log(1)\n      return console.log(a[i].index + 1)\n    }\n  }\n  // })\n}\n \nfunction partition(arr) {\n  var n = arr.length\n  var sum = 0;\n  var i, j;\n \n  for (i = 0; i < n; i++)\n    sum += arr[i].value;\n \n \n  if (sum % 2 !== 0)\n    return false;\n \n  var part = new Array(n + 1)\n  for (let k = 0; k < n + 1; k++) {\n    part[k] = new Array(Math.floor(sum / 2) + 1)\n  }\n \n  // initialize top row as false\n  for (i = 0; i <= sum / 2; i++)\n    part[0][i] = false;\n \n  // initialize leftmost column as true\n  for (i = 0; i <= n; i++)\n    part[i][0] = true;\n \n  // Fill the partition table in botton up manner\n  for (i = 1; i <= n; i++) {\n    for (j = 1; j <= sum / 2; j++) {\n      part[i][j] = part[i - 1][j];\n      if (j >= arr[i - 1].value)\n        part[i][j] = part[i][j] ||\n          part[i - 1][j - arr[i - 1].value];\n    }\n  }\n  return part[n][sum / 2];\n}\n ",
        "tests": [
            {
                "input": "4\r\n6 3 9 12\r\n",
                "output": "1\n2\n"
            },
            {
                "input": "2\r\n1 2\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n1267 1766 119 1532 555 1376 1500 1583 138 893 1812 332 1829 1233 77 979 499 1349 569 263 1889 1993 608 1488 1873 813 971 1306 1862 1159 602 1204 473 544 543 1667 1848 1351 465 108 1969 28 906 1037 556 822 1961 1396 1214 1822 129 1206 1287 226 1800 458 1701 1443 185 876 558 439 1682 922 1963 1303 167 1130 951 466 1725 1938 244 585 1296 847 454 561 1229 991 902 1188 233 1127 2000 448 536 1725 1605 934 438 718 1018 60 882 1434 1287 284 1742 1747\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n47 46 170 75 9 173 32 43 199 146 87 195 183 41 69 60 147 3 50 176 179 88 121 15 144 117 142 101 98 145 79 5 116 125 13 17 102 68 180 53 107 191 64 73 164 37 3 166 60 10 172 172 149 142 98 27 11 200 129 7 135 124 60 32 54 121 188 89 187 142 183 104 34 127 28 110 119 19 158 96 110 33 199 54 83 83 166 139 68 130 188 93 54 131 155 30 37 177 120 163\r\n",
                "output": "1\n18\n"
            },
            {
                "input": "100\r\n142 809 177 1644 1084 1772 935 647 1181 1475 1875 1998 454 1187 1507 1615 1691 131 39 507 1976 318 659 1783 876 117 1169 1151 745 1323 1005 687 1126 535 1015 1240 205 197 1620 1793 381 901 110 339 1369 1659 95 716 998 1917 1482 1261 1905 904 594 556 7 508 353 819 748 1787 1155 591 229 1454 1080 626 1885 1808 981 1137 388 1377 1283 1846 123 244 1759 1055 1017 1201 745 589 41 1604 69 310 1738 124 1341 1684 798 61 44 948 955 110 932 1128\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n12 140 16 128 120 20 52 12 24 172 188 76 16 176 124 36 36 168 172 192 8 80 184 200 196 100 16 92 108 96 156 108 76 44 164 124 112 84 44 168 36 180 176 96 56 164 96 132 168 116 60 56 140 192 28 84 88 152 184 148 76 144 112 192 80 44 136 160 24 108 20 164 132 28 64 88 24 148 172 64 180 20 104 8 100 40 112 128 188 68 152 84 164 164 100 48 88 192 12 1172\r\n",
                "output": "1\n1\n"
            },
            {
                "input": "99\r\n2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000\r\n",
                "output": "0\n"
            },
            {
                "input": "22\r\n1024 1024 512 512 256 256 128 128 64 64 32 32 16 16 8 8 4 4 2 2 1 1\r\n",
                "output": "1\n21\n"
            },
            {
                "input": "100\r\n32 64 96 128 160 192 224 256 288 320 352 384 416 448 480 512 544 576 608 640 672 704 736 768 800 832 864 896 928 960 992 1024 1056 1088 1120 1152 1184 1216 1248 1280 1312 1344 1376 1408 1440 1472 1504 1536 1568 1600 16 48 80 112 144 176 208 240 272 304 336 368 400 432 464 496 528 560 592 624 656 688 720 752 784 816 848 880 912 944 976 1008 1040 1072 1104 1136 1168 1200 1232 1264 1296 1328 1360 1392 1424 1456 1488 1520 1552 1584\r\n",
                "output": "1\n51\n"
            },
            {
                "input": "100\r\n16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 776 792\r\n",
                "output": "1\n99\n"
            },
            {
                "input": "15\r\n1024 512 512 256 128 128 64 32 32 16 8 8 4 2 2\r\n",
                "output": "1\n14\n"
            },
            {
                "input": "2\r\n28 28\r\n",
                "output": "1\n1\n"
            },
            {
                "input": "10\r\n1135 1617 1889 1863 1447 905 505 561 1800 514\r\n",
                "output": "0\n"
            },
            {
                "input": "2\r\n1 3\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n129 1159 547 250 1905 946 1036 1782 1255 1364 1053 705 1413 752 244 1143 659 879 145 1658 1370 363 1384 977 1594 1652 531 980 965 1294 1022 641 1282 593 937 170 1803 1160 1690 1861 1295 1842 536 1803 272 1332 321 377 1702 1606 405 1698 1899 801 408 634 445 71 964 1324 240 1915 1621 870 1225 372 155 1016 307 767 1595 1769 654 250 63 562 699 842 673 576 241 1206 836 790 1852 889 411 345 1864 628 1168 1298 1722 1881 1375 768 1000 801 1848 595\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n539 1285 1376 52 1954 1524 707 1680 344 1412 916 1439 501 665 221 1991 709 653 733 323 1527 428 837 851 897 888 1164 314 793 693 92 735 173 1742 98 1037 1724 1022 1697 194 123 1336 1024 164 1234 704 263 1351 1692 1984 1462 1576 1674 1108 1167 1398 785 606 887 387 679 275 553 1911 906 907 1826 1309 441 501 1270 981 1033 1489 1178 1968 1713 1268 1912 1911 1070 551 46 1669 1840 1401 1407 440 683 1128 1088 84 839 1676 1644 1696 1745 909 1649 1990\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n958 137 151 124 679 484 289 48 65 1394 34 118 271 1378 731 1439 933 136 1399 496 1854 57 1888 1955 457 691 1543 1733 1863 1827 256 630 799 1148 1347 1900 1835 887 797 480 1448 925 1517 1311 1050 15 1895 1066 181 95 596 1366 1541 724 1312 1517 1479 730 731 572 1214 1088 57 1139 671 520 146 280 1781 1050 162 100 974 849 1194 1220 1419 1708 445 633 564 1263 1572 1897 354 1071 683 1148 1892 490 897 1183 491 701 1036 1492 1725 1211 275 208\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n773 550 792 660 1441 653 523 1070 344 1338 421 1653 974 563 883 1323 1563 1920 393 482 1181 1744 445 930 1317 821 1674 1462 1141 851 383 1519 440 5 638 1744 1754 777 1021 1808 988 1599 1592 1243 1138 109 1293 529 932 1806 62 1542 1600 190 1635 768 902 1056 149 13 1387 856 1764 1834 1143 50 1011 668 1991 169 1238 283 731 1856 747 1202 329 733 398 257 632 1337 1395 779 1638 1361 192 1688 1315 1816 848 740 820 755 1857 1422 1457 1915 1319 1978\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n38 631 215 1062 1299 659 720 1441 298 1272 1732 604 671 178 318 1615 1305 17 721 818 213 1370 1523 422 689 1079 829 1580 1618 850 1916 1867 1343 1118 659 446 547 1518 215 1348 943 1756 529 1343 1317 804 1376 405 1246 230 1268 98 389 503 916 500 42 496 1785 1630 609 318 1649 1445 1520 224 1565 1606 708 685 1315 1678 716 459 1932 1744 780 1721 919 1555 1724 550 165 513 311 615 1339 1690 333 1061 1651 863 1425 860 1979 1031 523 286 484 621\r\n",
                "output": "1\n18\n"
            },
            {
                "input": "100\r\n1374 1830 979 387 728 1124 1922 980 776 790 741 892 1133 1708 157 464 1046 1709 1852 1495 842 948 1737 718 1842 14 880 1718 986 477 1712 1089 691 1816 635 264 1236 201 409 1784 564 509 517 1680 1250 168 1390 644 798 334 40 845 1133 1675 553 919 920 748 972 690 77 1236 1569 706 1325 1288 1675 447 429 803 1328 1046 965 1011 205 1749 180 938 448 723 41 302 1244 54 1387 729 216 826 1907 1721 1040 145 1629 1713 1027 1198 1371 871 899 1353\r\n",
                "output": "1\n81\n"
            },
            {
                "input": "100\r\n1571 560 226 1175 1507 1693 440 1339 1081 936 1408 1199 682 747 1420 1749 1011 369 479 228 1697 104 1810 132 455 1686 1667 307 140 705 1313 1091 1706 454 1921 201 1969 579 652 896 977 892 510 1252 1331 1481 297 376 577 1207 224 1696 1482 899 1228 615 1439 1522 667 1067 617 1740 1516 1580 1392 492 532 464 1621 546 1884 370 1305 1313 1568 1550 612 817 161 1815 1215 1582 180 1330 730 455 34 1192 1463 32 118 56 1725 1152 642 162 230 1204 1386 1069\r\n",
                "output": "1\n79\n"
            },
            {
                "input": "100\r\n1287 1066 1978 1251 308 1131 933 7 1559 742 1398 1867 1327 891 103 1271 926 1164 1684 1225 971 897 1437 515 752 839 439 170 412 573 1659 1865 433 86 1302 972 1319 537 280 1093 344 468 1061 171 178 1957 1511 518 1656 720 969 4 1937 892 861 1079 647 933 1768 1829 682 1643 609 487 1195 1650 1445 1866 1489 257 1862 305 1015 435 1159 1824 380 1784 402 1043 1297 693 1106 85 383 1408 505 1034 1247 1413 347 949 1151 340 577 1282 1828 1696 72 462\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n74 10 10 52 19 44 16 126 171 123 193 151 131 189 25 11 167 199 197 74 8 40 198 187 178 164 67 77 34 12 31 35 75 68 148 55 130 60 158 99 31 19 196 3 37 97 179 111 85 188 68 152 142 133 152 128 168 179 9 198 27 199 92 154 42 42 181 110 21 20 130 166 38 190 195 33 106 18 145 23 12 88 30 141 101 157 12 23 119 31 177 174 155 84 49 74 95 75 173 1421\r\n",
                "output": "1\n44\n"
            },
            {
                "input": "100\r\n132 188 168 152 74 182 144 94 136 150 136 200 106 90 20 186 56 28 174 28 6 154 174 38 18 46 52 200 144 62 42 66 100 180 6 198 70 16 82 100 174 150 118 8 84 50 116 124 106 14 68 176 28 98 192 54 24 132 96 44 88 18 30 66 158 12 144 68 128 66 134 136 64 194 100 44 200 180 190 118 140 144 62 84 200 16 2 18 170 106 92 76 58 160 22 148 110 76 60 1528\r\n",
                "output": "1\n87\n"
            },
            {
                "input": "100\r\n168 16 184 76 116 140 172 20 164 156 92 40 28 88 28 164 156 4 24 28 180 184 88 76 116 100 56 112 84 160 32 16 104 88 84 156 60 172 56 28 164 28 196 60 140 48 132 120 148 96 160 60 148 84 168 72 44 56 72 116 168 188 132 196 88 200 160 88 68 124 12 116 16 200 196 136 20 76 80 16 200 92 156 84 84 80 20 200 4 180 44 96 148 8 4 100 56 144 120 1212\r\n",
                "output": "1\n18\n"
            },
            {
                "input": "100\r\n144 96 176 40 192 8 24 32 56 32 32 56 64 24 96 80 160 104 136 32 64 144 112 200 152 168 16 128 176 88 8 32 200 72 136 80 136 192 80 72 8 56 48 128 200 32 200 104 168 48 32 176 144 72 96 56 152 104 32 48 72 88 48 72 32 16 144 160 56 104 88 24 128 128 120 40 136 40 56 80 8 184 88 64 16 176 120 136 72 16 104 56 112 96 120 16 200 176 160 512\r\n",
                "output": "1\n6\n"
            },
            {
                "input": "100\r\n112 16 48 64 144 176 16 32 80 80 96 32 160 192 64 48 176 32 176 32 192 192 192 176 112 48 16 176 64 80 80 112 64 48 80 192 128 32 176 144 16 112 80 96 32 80 16 144 16 32 192 32 96 160 192 160 16 160 160 80 32 16 48 16 112 112 32 160 96 32 176 176 192 80 160 64 192 32 96 144 128 176 112 176 128 80 32 32 48 16 192 32 112 48 80 80 128 128 160 400\r\n",
                "output": "1\n2\n"
            },
            {
                "input": "100\r\n32 64 32 96 160 128 192 64 96 128 192 160 96 96 64 128 192 128 64 160 32 128 64 160 128 32 160 32 32 64 128 96 96 32 96 96 128 64 96 128 192 32 32 96 32 64 32 160 160 64 192 192 64 128 128 192 128 96 96 160 96 128 96 192 64 96 192 32 64 64 64 64 160 32 128 160 160 32 192 160 192 160 64 96 96 128 64 128 192 128 64 160 192 64 192 32 64 128 32 736\r\n",
                "output": "1\n1\n"
            },
            {
                "input": "100\r\n64 64 128 64 128 64 192 128 128 192 192 64 192 128 64 64 64 128 64 128 192 64 192 64 64 64 64 64 128 192 128 192 64 128 128 128 128 192 192 128 64 128 192 192 128 192 64 128 192 128 128 64 64 192 192 128 192 128 128 192 192 192 64 192 192 128 64 192 192 128 192 192 192 64 64 192 128 192 192 64 192 192 128 64 128 64 128 192 192 192 64 192 128 64 192 192 192 192 128 192\r\n",
                "output": "1\n1\n"
            },
            {
                "input": "100\r\n128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 640\r\n",
                "output": "1\n1\n"
            },
            {
                "input": "100\r\nr\n",
                "output": "1\n1\n"
            },
            {
                "input": "3\r\n1024 512 512\r\n",
                "output": "1\n2\n"
            },
            {
                "input": "30\r\n128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 128 1728 1856\r\n",
                "output": "1\n29\n"
            },
            {
                "input": "10\r\n594 1012 406 1478 148 585 1751 1930 1791 1748\r\n",
                "output": "0\n"
            },
            {
                "input": "10\r\n1980 777 1699 811 949 1626 158 1227 1712 1798\r\n",
                "output": "0\n"
            },
            {
                "input": "10\r\n357 1850 763 305 118 1590 1835 951 1728 1831\r\n",
                "output": "0\n"
            },
            {
                "input": "30\r\n1001 1999 2000 1998 1996 1994 1992 1990 1988 1986 1984 1982 1980 1978 1976 1974 1972 1970 1968 1966 1964 1962 1960 1958 1956 1954 1952 1950 1948 1946\r\n",
                "output": "0\n"
            },
            {
                "input": "8\r\n4 18 20 40 42 50 50 100\r\n",
                "output": "1\n2\n"
            },
            {
                "input": "4\r\n4 4 8 16\r\n",
                "output": "1\n1\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 2 * 1e5 + 10\nvar mod = BigInt(1e9 + 7)\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar a\nvar dp\nfunction main() {\n  // const xx = readline();\n  // Array(Number(xx)).fill(1).map((t, i) => {\n  var n = parseInt(readline());\n  // var [n, k] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n  a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var aa = a.slice()\n  a.sort((a, b) => a - b)\n \n  dp = new Array(n + 1)\n  for (let i = 0; i < n + 1; i++) {\n    dp[i] = new Array(n).fill(Number.MAX_SAFE_INTEGER)\n  }\n  console.log(solve(0, n - 1, a))\n  // })\n}\n \nfunction solve(l, r) {\n  if (l === r) return 0\n \n  if(dp[l][r] !== Number.MAX_SAFE_INTEGER) return dp[l][r]\n  var ans = Math.min(solve(l + 1, r), solve(l, r - 1))\n  if(dp[l][r] === Number.MAX_SAFE_INTEGER) dp[l][r] = ans + a[r] - a[l]\n  return ans + a[r] - a[l]\n}",
        "tests": [
            {
                "input": "3\r\n3 1 2\r\n",
                "output": "3\n"
            },
            {
                "input": "1\r\n5\r\n",
                "output": "0\n"
            },
            {
                "input": "6\r\n1 6 3 3 6 3\r\n",
                "output": "11\n"
            },
            {
                "input": "6\r\n104 943872923 6589 889921234 1000000000 69\r\n",
                "output": "2833800505\n"
            },
            {
                "input": "20\r\n293434130 567534945 339132630 291152695 959629878 416618095 149341899 479358017 509348379 335313693 386003521 360528367 387150541 724271523 741417449 63831275 308645820 457460287 716709394 977143845\r\n",
                "output": "5734409263\n"
            },
            {
                "input": "35\r\n361 329 122 933 329 326 430 52 651 78 98 208 218 430 890 208 263 863 411 890 683 863 69 527 218 758 630 683 353 417 361 310 411 417 19\r\n",
                "output": "12030\n"
            },
            {
                "input": "100\r\n9135 4978 1897 347 918 9160 9413 1712 2884 347 8724 4978 7037 7498 9022 814 6342 927 8180 1712 1897 9022 6046 6305 3146 6598 8489 9227 4319 4016 6046 4978 1712 4118 3120 568 9160 3015 195 3146 2463 3126 7037 5235 4025 4912 4118 4025 4168 9808 5235 9160 4308 6342 8910 4319 5816 8910 9022 3120 2486 189 9022 4118 9135 3443 1220 5885 1204 3126 1712 7341 3015 6598 3443 568 9135 2884 3443 1204 8180 4016 6100 9160 6046 3443 7037 7262 9227 6305 1897 1897 7037 568 2884 3126 3126 2370 8180 7037\r\n",
                "output": "434092\n"
            },
            {
                "input": "100\r\n8217 8217 707 707 3502 9570 1009 1009 1009 643 1009 3826 643 707 7485 5007 8054 1009 4041 944 4041 3136 7384 4041 2750 6267 3826 3502 9570 643 7485 4041 707 3502 944 944 6267 944 1009 3502 8217 6267 1009 944 7384 643 2940 9570 9570 3136 7485 5007 8217 2750 8054 2940 7384 6267 643 8217 9116 5007 3136 9116 3136 7441 3502 8054 3826 944 3502 2940 7441 9570 3502 8217 643 3826 3136 7441 1009 2750 8054 3826 4041 3502 8217 7441 3826 9116 8092 2750 4041 1009 3136 9116 8054 8092 9570 3826\r\n",
                "output": "394947\n"
            },
            {
                "input": "100\r\n5308 1343 7447 104 957 1911 9274 2915 224 6316 107 3842 4798 6632 4753 9329 2951 5764 4855 8153 5174 7061 4451 302 460 1333 6154 269 6206 7717 3483 1075 9824 2308 2962 3987 496 7333 2804 339 7143 8105 7456 8649 86 4878 4666 4161 3633 8721 4476 7841 5050 5168 8633 9270 9787 5205 8058 6758 136 8539 2630 8229 9828 3899 2448 1687 811 3321 5999 7319 9485 1828 4749 7349 6649 7421 2005 7601 9291 1279 4445 2685 9235 5913 7266 2881 3440 3516 138 3084 9772 5397 1361 9327 4726 7584 678 3265\r\n",
                "output": "476329\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 2 * 1e5 + 10\nvar mod = BigInt(1e9 + 7)\n \n// Make a Snippet for the code above this and then write your logic in main();\n \nfunction main() {\n  // const xx = readline();\n  // Array(Number(xx)).fill(1).map((t, i) => {\n  //   var n = parseInt(readline());\n  var [n, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n  // var [x, y] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // });\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n \n  var res = []\n  while (res.length < n) {\n    var letter = 0\n \n    for (let i = 0; i < k; i++) {\n      res.push(alphabet[letter])\n      for (let j = i + 1; j < k; j++) {\n        res.push(alphabet[letter])\n        res.push(alphabet[j])\n      }\n      letter++\n    }\n  }\n  var ans= []\n  for (let i = 0; i < n; i++) {\n    ans.push(res[i])\n  }\n  console.log(ans.join(''))\n  // console.log(ans.length)\n  // })\n}\n ",
        "tests": [
            {
                "input": "9 4\r\n",
                "output": "aabacadbb\n"
            },
            {
                "input": "5 1\r\n",
                "output": "aaaaa\n"
            },
            {
                "input": "10 26\r\n",
                "output": "aabacadaea\n"
            },
            {
                "input": "32 2\r\n",
                "output": "aabbaabbaabbaabbaabbaabbaabbaabb\n"
            },
            {
                "input": "9 3\r\n",
                "output": "aabacbbcc\n"
            },
            {
                "input": "10 3\r\n",
                "output": "aabacbbcca\n"
            },
            {
                "input": "25 5\r\n",
                "output": "aabacadaebbcbdbeccdceddee\n"
            },
            {
                "input": "26 5\r\n",
                "output": "aabacadaebbcbdbeccdceddeea\n"
            },
            {
                "input": "27 5\r\n",
                "output": "aabacadaebbcbdbeccdceddeeaa\n"
            },
            {
                "input": "33 4\r\n",
                "output": "aabacadbbcbdccddaabacadbbcbdccdda\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 21\nvar mod = 1000000007\n \n// Make a Snippet for the code above this and then write your logic in main();\n \nfunction main() {\n  // const x = readline();\n  var binom = new Array(maxN)\n  binom[0] = new Array(maxN).fill(1)\n  binom[1] = new Array(maxN).fill(1)\n \n  for (var i = 2; i < maxN; i++) {\n    binom[i] = new Array(maxN).fill(1)\n \n    for (var j = 1; j < i; j++) {\n      binom[i][j] = (binom[i - 1][j - 1] + binom[i - 1][j]);\n    }\n  }\n \n  // Array(Number(x)).fill(1).map((t, i) => {\n  const a = parseInt(readline());\n  // var [n, k] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // });\n  // })\n  var ans = 1\n  for (let i = 1; i <= a / 2 - 1; i++) {\n    ans *= i\n  }\n  // console.log(binom[a][a / 2])\n  console.log(binom[a][a / 2] * ans * ans / 2)\n \n \n}",
        "tests": [
            {
                "input": "2\r\n",
                "output": "1\n"
            },
            {
                "input": "4\r\n",
                "output": "3\n"
            },
            {
                "input": "8\r\n",
                "output": "1260\n"
            },
            {
                "input": "20\r\n",
                "output": "12164510040883200\n"
            },
            {
                "input": "6\r\n",
                "output": "40\n"
            },
            {
                "input": "10\r\n",
                "output": "72576\n"
            },
            {
                "input": "12\r\n",
                "output": "6652800\n"
            },
            {
                "input": "14\r\n",
                "output": "889574400\n"
            },
            {
                "input": "18\r\n",
                "output": "39520825344000\n"
            },
            {
                "input": "16\r\n",
                "output": "163459296000\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nvar maxN = 1001\nvar mod = 1000000007\n \n// Make a Snippet for the code above this and then write your logic in main();\n \nfunction main() {\n  const x = readline();\n  var toPrint = ''\n  Array(Number(x)).fill(1).map((t, i) => {\n    // const a = parseInt(readline());\n    var [n, k] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n    if (k === 1) return toPrint += 1 + '\\n'\n \n    var dp = new Array(k)\n    for (let j = 0; j < k; j++) {\n      dp[j] = new Array(n).fill(0)\n    }\n    for (let j = 0; j < n; j++) {\n      dp[0][j] = 1\n    }\n    for (let j = 0; j < k - 2; j++) {\n      if (j % 2 === 0) {\n        var sum = 0\n        for (let i = 0; i < n; i++) {\n          dp[j + 1][i] = sum\n          sum += dp[j][i]\n          sum = sum % mod\n        }\n      } else {\n        sum = 0\n        for (let i = n - 1; i >= 0; i--) {\n          dp[j + 1][i] = sum\n          sum += dp[j][i]\n          sum = sum % mod\n        }\n      }\n    }\n \n    var ans = 1\n    for (let j = 0; j < k - 1; j++) {\n      for (let i = 0; i < n; i++) {\n        // console.log(ans, dp[j][i])\n        ans = (ans + dp[j][i]) % mod\n      }\n    }\n    toPrint += ans.toString() + '\\n'\n    // console.log(dp)\n  })\n  console.log(toPrint)\n \n \n}",
        "tests": [
            {
                "input": "4\r\n2 3\r\n2 2\r\n3 1\r\n1 3\r\n",
                "output": "4\n3\n1\n2\n\n"
            },
            {
                "input": "3\r\n1 1\r\n1 500\r\n500 250\r\n",
                "output": "1\n2\n257950823\n\n"
            },
            {
                "input": "1\r\n1000 1000\r\n",
                "output": "211715064\n\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n  const x = readline();\n \n  Array(Number(x)).fill(1).map((t, i) => {\n    var n = parseInt(readline())\n    var a = readline().split(' ').map((x, i) => {\n      return parseInt(x)\n    })\n \n    var sum = 0\n    var max = 0\n    for (let j = 0; j < n; j++) {\n      sum += a[j]\n      max = a[j]>max ? a[j] : max\n    }\n    // if (n === 1) return console.log('T')\n    if (max > Math.floor(sum /2)) return console.log('T')\n    console.log(sum % 2 === 1? 'T' : 'HL')\n    // if() return\n \n  })\n}\n \nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}",
        "tests": [
            {
                "input": "2\r\n1\r\n2\r\n2\r\n1 1\r\n",
                "output": "T\nHL\n"
            },
            {
                "input": "1\r\n4\r\n2 3 1 2\r\n",
                "output": "HL\n"
            },
            {
                "input": "2\r\n2\r\n1 4\r\n3\r\n3 1 3\r\n",
                "output": "T\nT\n"
            },
            {
                "input": "3\r\n2\r\n4 3\r\n4\r\n2 2 2 3\r\n3\r\n1 4 1\r\n",
                "output": "T\nT\nT\n"
            },
            {
                "input": "4\r\n5\r\n1 3 1 3 4\r\n1\r\n4\r\n1\r\n5\r\n2\r\n3 3\r\n",
                "output": "HL\nT\nT\nHL\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n  // const x = readline();\n \n  // Array(Number(x)).fill(1).map((t, i) => {\n  var n = BigInt(readline())\n  var a = readline().split(' ').map((x, i) => {\n    return BigInt(x)\n  })\n \n  if(n=== 1n) {\n \n    console.log(1, 1)\n    console.log(-a[0].toString())\n    console.log(1, 1)\n    console.log(0)\n    console.log(1, 1)\n    console.log(0)\n    return\n  }\n  var ans = []\n  for (let i = 0n; i < n - 1n; i++) {\n    var j =(a[i]% n) * (n-1n)\n    // while ((j + a[i]) % n !== 0) {\n    //   j += BigInt(n - 1)\n    // }\n    a[i] = a[i] + j\n    ans.push(j)\n  }\n \n  var ans2 = []\n  j = BigInt(a[n-1n]% n)\n \n  a[n - 1n] = a[n - 1n] - j\n  ans2.push(-j)\n \n  var ans3 = []\n  for (let i = 0; i < n; i++) {\n    ans3.push(-a[i])\n  }\n \n  console.log(1, (n-1n).toString())\n  console.log(ans.join(' '))\n  console.log(n.toString(), n.toString())\n  console.log(ans2.join(' '))\n  console.log(1, n.toString())\n  console.log(ans3.join(' '))\n \n \n}\n \nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}",
        "tests": [
            {
                "input": "4\r\n1 3 2 4\r\n",
                "output": "1 3\n3 9 6\n4 4\n0\n1 4\n-4 -12 -8 -4\n"
            },
            {
                "input": "1\r\n34688642\r\n",
                "output": "1 1\n-34688642\n1 1\n0\n1 1\n0\n"
            },
            {
                "input": "2\r\n-492673762 -496405053\r\n",
                "output": "1 1\n0\n2 2\n1\n1 2\n492673762 496405052\n"
            },
            {
                "input": "4\r\n-432300451 509430974 -600857890 -140418957\r\n",
                "output": "1 3\n-9 6 -6\n4 4\n1\n1 4\n432300460 -509430980 600857896 140418956\n"
            },
            {
                "input": "16\r\n-15108237 489260742 681810357 -78861365 -416467743 -896443270 904192296 -932642644 173249302 402207268 -329323498 537696045 -899233426 902347982 -595589754 -480337024\r\n",
                "output": "1 15\n-195 90 75 -75 -225 -90 120 -60 90 60 -150 195 -30 210 -150\n16 16\n0\n1 16\n15108432 -489260832 -681810432 78861440 416467968 896443360 -904192416 932642704 -173249392 -402207328 329323648 -537696240 899233456 -902348192 595589904 480337024\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n  // const x = readline();\n \n  // Array(Number(x)).fill(1).map((t, i) => {\n  var n = parseInt(readline())\n  var a = readline().split(' ').map((x, i) => {\n    return parseInt(x)\n  })\n \n  a = a.sort((a, b) => a - b)\n  var sum1 = 0\n  var sum2 = 0\n  var max = a[n-1]\n  var base = Math.floor(Math.pow(max, 1/(n-1)))\n  var base1 = Math.ceil(Math.pow(max, 1/(n-1)))\n \n  var mult1 = 1\n  for (let i = 0; i < a.length; i++) {\n    sum1+= Math.abs(mult1 - a[i])\n    mult1*= base\n  }\n  var mult2 = 1\n  for (let i = 0; i < a.length; i++) {\n    sum2+= Math.abs(mult2 - a[i])\n    mult2*= base1\n  }\n  console.log(Math.min(sum1, sum2))\n  // console.log(sum1, sum2)\n  // console.log(base1, base, max)\n  // console.log(Math.pow(1000, 1/3))\n \n  // })\n}\n \nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}",
        "tests": [
            {
                "input": "3\r\n1 3 2\r\n",
                "output": "1\n"
            },
            {
                "input": "3\r\n1000000000 1000000000 1000000000\r\n",
                "output": "1999982505\n"
            },
            {
                "input": "20\r\n51261 11877 300 30936722 84 75814681 352366 23 424 16392314 27267 832 4 562873474 33 516967731 158909407 32148531 66 757\r\n",
                "output": "850575966\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\nvar mod = 998244353n\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = BigInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  // var [n, x, y] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // });\n  var a = readline().split(' ').map((x, iii) => {\n    return BigInt(x)\n  });\n  var b = readline().split(' ').map((x, iii) => {\n    return BigInt(x)\n  });\n  for (let i = 1n; i <= n; i++) {\n    a[i - 1n] = a[i - 1n] * i * (n - i + 1n)\n  }\n  a = a.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  b = b.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  })\n \n  var sum = 0n\n  for (let i = 0n; i < n; i++) {\n    // console.log(a[i], b[n - i - 1n])\n    sum = (sum + a[i] * b[n - i - 1n]) % mod\n  }\n \n  // console.log(a)\n  // console.log(b)\n  console.log(sum.toString())\n \n}",
        "tests": [
            {
                "input": "5\r\n1 8 7 2 4\r\n9 7 2 9 3\r\n",
                "output": "646\n"
            },
            {
                "input": "1\r\n1000000\r\n1000000\r\n",
                "output": "757402647\n"
            },
            {
                "input": "2\r\n1 3\r\n4 2\r\n",
                "output": "20\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  // var [n, x, y] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // });\n  var a = readline().split('').map((x, iii) => {\n    return x\n  });\n  var res = []\n  for (let i = 0; i < a.length; i++) {\n    if (res.length % 2 === 0 || res[res.length - 1] !== a[i]) res.push(a[i])\n  }\n  var ans = []\n \n \n  if (res.length % 2 !== 0) {\n    res = res.slice(0, res.length - 1)\n  }\n  console.log(a.length - res.length)\n  console.log(res.join(''))\n}\n ",
        "tests": [
            {
                "input": "4\r\ngood\r\n",
                "output": "0\ngood\n"
            },
            {
                "input": "4\r\naabc\r\n",
                "output": "2\nab\n"
            },
            {
                "input": "3\r\naaa\r\n",
                "output": "3\n\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var array = {\n    4: 0,\n    8: 1, 15: 2, 16: 3, 23: 4, 42: 5\n  }\n  for (let i = 0; i < n; i++) {\n    a[i] = array[a[i]]\n  }\n  array = {}\n  var count = new Array(6).fill(0)\n  for (let i = 0; i < n; i++) {\n    // for (let j = 0; j < n; j++) {\n    if (a[i] === 0) {\n      count[0]++\n      continue\n    }\n    if (count[a[i] - 1] >= 1) {\n      count[a[i]]++\n      count[a[i] - 1]--\n    }\n \n  }\n \n// console.log(a)\n  console.log(a.length - count[5] * 6)\n// })\n}\n \n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}\n \n//start end red black tree\nfunction TreeBase() {\n}\n \n// removes all nodes from the tree\nTreeBase.prototype.clear = function () {\n  this._root = null;\n  this.size = 0;\n};\n \n// returns node data if found, null otherwise\nTreeBase.prototype.find = function (data) {\n  var res = this._root;\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      return res.data;\n    } else {\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function (data) {\n  var res = this._root;\n  var iter = this.iterator();\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      iter._cursor = res;\n      return iter;\n    } else {\n      iter._ancestors.push(res);\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function (item) {\n  var cur = this._root;\n  var iter = this.iterator();\n  var cmp = this._comparator;\n \n  while (cur !== null) {\n    var c = cmp(item, cur.data);\n    if (c === 0) {\n      iter._cursor = cur;\n      return iter;\n    }\n    iter._ancestors.push(cur);\n    cur = cur.get_child(c > 0);\n  }\n \n  for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n    cur = iter._ancestors[i];\n    if (cmp(item, cur.data) < 0) {\n      iter._cursor = cur;\n      iter._ancestors.length = i;\n      return iter;\n    }\n  }\n \n  iter._ancestors.length = 0;\n  return iter;\n};\n \n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function (item) {\n  var iter = this.lowerBound(item);\n  var cmp = this._comparator;\n \n  while (iter.data() !== null && cmp(iter.data(), item) === 0) {\n    iter.next();\n  }\n \n  return iter;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.min = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.left !== null) {\n    res = res.left;\n  }\n \n  return res.data;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.max = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.right !== null) {\n    res = res.right;\n  }\n \n  return res.data;\n};\n \n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function () {\n  return new Iterator(this);\n};\n \n// calls cb on each node's data, in order\nTreeBase.prototype.each = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.next()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.prev()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n \nfunction Iterator(tree) {\n  this._tree = tree;\n  this._ancestors = [];\n  this._cursor = null;\n}\n \nIterator.prototype.data = function () {\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._minNode(root);\n    }\n  } else {\n    if (this._cursor.right === null) {\n      // no greater node in subtree, go up to parent\n      // if coming from a right child, continue up the stack\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.right === save);\n    } else {\n      // get the next node from the subtree\n      this._ancestors.push(this._cursor);\n      this._minNode(this._cursor.right);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._maxNode(root);\n    }\n  } else {\n    if (this._cursor.left === null) {\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.left === save);\n    } else {\n      this._ancestors.push(this._cursor);\n      this._maxNode(this._cursor.left);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \nIterator.prototype._minNode = function (start) {\n  while (start.left !== null) {\n    this._ancestors.push(start);\n    start = start.left;\n  }\n  this._cursor = start;\n};\n \nIterator.prototype._maxNode = function (start) {\n  while (start.right !== null) {\n    this._ancestors.push(start);\n    start = start.right;\n  }\n  this._cursor = start;\n};\n \nfunction Node(data) {\n  this.data = data;\n  this.left = null;\n  this.right = null;\n  this.red = true;\n}\n \nNode.prototype.get_child = function (dir) {\n  return dir ? this.right : this.left;\n};\n \nNode.prototype.set_child = function (dir, val) {\n  if (dir) {\n    this.right = val;\n  } else {\n    this.left = val;\n  }\n};\n \nfunction RBTree(comparator) {\n  this._root = null;\n  this._comparator = comparator;\n  this.size = 0;\n}\n \nRBTree.prototype = new TreeBase();\n \n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function (data) {\n  var ret = false;\n \n  if (this._root === null) {\n    // empty tree\n    this._root = new Node(data);\n    ret = true;\n    this.size++;\n  } else {\n    var head = new Node(undefined); // fake tree root\n \n    var dir = 0;\n    var last = 0;\n \n    // setup\n    var gp = null; // grandparent\n    var ggp = head; // grand-grand-parent\n    var p = null; // parent\n    var node = this._root;\n    ggp.right = this._root;\n \n    // search down\n    while (true) {\n      if (node === null) {\n        // insert new node at the bottom\n        node = new Node(data);\n        p.set_child(dir, node);\n        ret = true;\n        this.size++;\n      } else if (is_red(node.left) && is_red(node.right)) {\n        // color flip\n        node.red = true;\n        node.left.red = false;\n        node.right.red = false;\n      }\n \n      // fix red violation\n      if (is_red(node) && is_red(p)) {\n        var dir2 = ggp.right === gp;\n \n        if (node === p.get_child(last)) {\n          ggp.set_child(dir2, single_rotate(gp, !last));\n        } else {\n          ggp.set_child(dir2, double_rotate(gp, !last));\n        }\n      }\n \n      var cmp = this._comparator(node.data, data);\n \n      // stop if found\n      if (cmp === 0) {\n        break;\n      }\n \n      last = dir;\n      dir = cmp < 0;\n \n      // update helpers\n      if (gp !== null) {\n        ggp = gp;\n      }\n      gp = p;\n      p = node;\n      node = node.get_child(dir);\n    }\n \n    // update root\n    this._root = head.right;\n  }\n \n  // make root black\n  this._root.red = false;\n \n  return ret;\n};\n \n// returns true if removed, false if not found\nRBTree.prototype.remove = function (data) {\n  if (this._root === null) {\n    return false;\n  }\n \n  var head = new Node(undefined); // fake tree root\n  var node = head;\n  node.right = this._root;\n  var p = null; // parent\n  var gp = null; // grand parent\n  var found = null; // found item\n  var dir = 1;\n \n  while (node.get_child(dir) !== null) {\n    var last = dir;\n \n    // update helpers\n    gp = p;\n    p = node;\n    node = node.get_child(dir);\n \n    var cmp = this._comparator(data, node.data);\n \n    dir = cmp > 0;\n \n    // save found node\n    if (cmp === 0) {\n      found = node;\n    }\n \n    // push the red node down\n    if (!is_red(node) && !is_red(node.get_child(dir))) {\n      if (is_red(node.get_child(!dir))) {\n        var sr = single_rotate(node, dir);\n        p.set_child(last, sr);\n        p = sr;\n      } else if (!is_red(node.get_child(!dir))) {\n        var sibling = p.get_child(!last);\n        if (sibling !== null) {\n          if (!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n            // color flip\n            p.red = false;\n            sibling.red = true;\n            node.red = true;\n          } else {\n            var dir2 = gp.right === p;\n \n            if (is_red(sibling.get_child(last))) {\n              gp.set_child(dir2, double_rotate(p, last));\n            } else if (is_red(sibling.get_child(!last))) {\n              gp.set_child(dir2, single_rotate(p, last));\n            }\n \n            // ensure correct coloring\n            var gpc = gp.get_child(dir2);\n            gpc.red = true;\n            node.red = true;\n            gpc.left.red = false;\n            gpc.right.red = false;\n          }\n        }\n      }\n    }\n  }\n \n  // replace and remove if found\n  if (found !== null) {\n    found.data = node.data;\n    p.set_child(p.right === node, node.get_child(node.left === null));\n    this.size--;\n  }\n \n  // update root and make it black\n  this._root = head.right;\n  if (this._root !== null) {\n    this._root.red = false;\n  }\n \n  return found !== null;\n};\n \nfunction is_red(node) {\n  return node !== null && node.red;\n}\n \nfunction single_rotate(root, dir) {\n  var save = root.get_child(!dir);\n \n  root.set_child(!dir, save.get_child(dir));\n  save.set_child(dir, root);\n \n  root.red = true;\n  save.red = false;\n \n  return save;\n}\n \nfunction double_rotate(root, dir) {\n  root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n  return single_rotate(root, dir);\n}\n \n//end red black tree",
        "tests": [
            {
                "input": "5\r\n4 8 15 16 23\r\n",
                "output": "5\n"
            },
            {
                "input": "12\r\n4 8 4 15 16 8 23 15 16 42 23 42\r\n",
                "output": "0\n"
            },
            {
                "input": "15\r\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\r\n",
                "output": "3\n"
            },
            {
                "input": "1\r\n4\r\n",
                "output": "1\n"
            },
            {
                "input": "1\r\n42\r\n",
                "output": "1\n"
            },
            {
                "input": "100\r\n4 42 23 23 8 42 16 23 42 16 42 8 4 23 4 4 23 42 16 42 23 23 23 42 4 42 8 8 16 23 15 23 16 4 42 15 15 23 16 15 16 4 4 15 23 42 42 15 8 23 8 23 4 15 16 15 42 8 23 16 15 42 23 8 4 16 15 16 23 16 16 4 23 16 8 23 16 15 23 4 4 8 15 4 4 15 8 23 23 4 4 8 8 4 42 15 4 4 42 16\r\n",
                "output": "64\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var array = {\n    4: 0,\n    8: 1, 15: 2, 16: 3, 23: 4, 42: 5\n  }\n  for (let i = 0; i < n; i++) {\n    a[i] = array[a[i]]\n  }\n  array  = {}\n  for (let i = 0; i < 6; i++) {\n    array[i] = new RBTree((a, b) => a - b)\n  }\n  for (let i = 0; i < n; i++) {\n    if(a[i]===0){\n      array[a[i]].insert(i)\n      continue\n    }\n    var val = array[a[i]-1].lowerBound(i).prev()\n \n    // console.log(val)\n    if(val !==null){\n      array[a[i]-1].remove(val)\n      array[a[i]].insert(i)\n    }\n  }\n    // console.log(a)\n  console.log(a.length - array[5].size*6)\n  // })\n}\n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}\n \n//start end red black tree\nfunction TreeBase() {\n}\n \n// removes all nodes from the tree\nTreeBase.prototype.clear = function () {\n  this._root = null;\n  this.size = 0;\n};\n \n// returns node data if found, null otherwise\nTreeBase.prototype.find = function (data) {\n  var res = this._root;\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      return res.data;\n    } else {\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function (data) {\n  var res = this._root;\n  var iter = this.iterator();\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      iter._cursor = res;\n      return iter;\n    } else {\n      iter._ancestors.push(res);\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function (item) {\n  var cur = this._root;\n  var iter = this.iterator();\n  var cmp = this._comparator;\n \n  while (cur !== null) {\n    var c = cmp(item, cur.data);\n    if (c === 0) {\n      iter._cursor = cur;\n      return iter;\n    }\n    iter._ancestors.push(cur);\n    cur = cur.get_child(c > 0);\n  }\n \n  for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n    cur = iter._ancestors[i];\n    if (cmp(item, cur.data) < 0) {\n      iter._cursor = cur;\n      iter._ancestors.length = i;\n      return iter;\n    }\n  }\n \n  iter._ancestors.length = 0;\n  return iter;\n};\n \n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function (item) {\n  var iter = this.lowerBound(item);\n  var cmp = this._comparator;\n \n  while (iter.data() !== null && cmp(iter.data(), item) === 0) {\n    iter.next();\n  }\n \n  return iter;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.min = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.left !== null) {\n    res = res.left;\n  }\n \n  return res.data;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.max = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.right !== null) {\n    res = res.right;\n  }\n \n  return res.data;\n};\n \n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function () {\n  return new Iterator(this);\n};\n \n// calls cb on each node's data, in order\nTreeBase.prototype.each = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.next()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.prev()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n \nfunction Iterator(tree) {\n  this._tree = tree;\n  this._ancestors = [];\n  this._cursor = null;\n}\n \nIterator.prototype.data = function () {\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._minNode(root);\n    }\n  } else {\n    if (this._cursor.right === null) {\n      // no greater node in subtree, go up to parent\n      // if coming from a right child, continue up the stack\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.right === save);\n    } else {\n      // get the next node from the subtree\n      this._ancestors.push(this._cursor);\n      this._minNode(this._cursor.right);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._maxNode(root);\n    }\n  } else {\n    if (this._cursor.left === null) {\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.left === save);\n    } else {\n      this._ancestors.push(this._cursor);\n      this._maxNode(this._cursor.left);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \nIterator.prototype._minNode = function (start) {\n  while (start.left !== null) {\n    this._ancestors.push(start);\n    start = start.left;\n  }\n  this._cursor = start;\n};\n \nIterator.prototype._maxNode = function (start) {\n  while (start.right !== null) {\n    this._ancestors.push(start);\n    start = start.right;\n  }\n  this._cursor = start;\n};\n \nfunction Node(data) {\n  this.data = data;\n  this.left = null;\n  this.right = null;\n  this.red = true;\n}\n \nNode.prototype.get_child = function (dir) {\n  return dir ? this.right : this.left;\n};\n \nNode.prototype.set_child = function (dir, val) {\n  if (dir) {\n    this.right = val;\n  } else {\n    this.left = val;\n  }\n};\n \nfunction RBTree(comparator) {\n  this._root = null;\n  this._comparator = comparator;\n  this.size = 0;\n}\n \nRBTree.prototype = new TreeBase();\n \n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function (data) {\n  var ret = false;\n \n  if (this._root === null) {\n    // empty tree\n    this._root = new Node(data);\n    ret = true;\n    this.size++;\n  } else {\n    var head = new Node(undefined); // fake tree root\n \n    var dir = 0;\n    var last = 0;\n \n    // setup\n    var gp = null; // grandparent\n    var ggp = head; // grand-grand-parent\n    var p = null; // parent\n    var node = this._root;\n    ggp.right = this._root;\n \n    // search down\n    while (true) {\n      if (node === null) {\n        // insert new node at the bottom\n        node = new Node(data);\n        p.set_child(dir, node);\n        ret = true;\n        this.size++;\n      } else if (is_red(node.left) && is_red(node.right)) {\n        // color flip\n        node.red = true;\n        node.left.red = false;\n        node.right.red = false;\n      }\n \n      // fix red violation\n      if (is_red(node) && is_red(p)) {\n        var dir2 = ggp.right === gp;\n \n        if (node === p.get_child(last)) {\n          ggp.set_child(dir2, single_rotate(gp, !last));\n        } else {\n          ggp.set_child(dir2, double_rotate(gp, !last));\n        }\n      }\n \n      var cmp = this._comparator(node.data, data);\n \n      // stop if found\n      if (cmp === 0) {\n        break;\n      }\n \n      last = dir;\n      dir = cmp < 0;\n \n      // update helpers\n      if (gp !== null) {\n        ggp = gp;\n      }\n      gp = p;\n      p = node;\n      node = node.get_child(dir);\n    }\n \n    // update root\n    this._root = head.right;\n  }\n \n  // make root black\n  this._root.red = false;\n \n  return ret;\n};\n \n// returns true if removed, false if not found\nRBTree.prototype.remove = function (data) {\n  if (this._root === null) {\n    return false;\n  }\n \n  var head = new Node(undefined); // fake tree root\n  var node = head;\n  node.right = this._root;\n  var p = null; // parent\n  var gp = null; // grand parent\n  var found = null; // found item\n  var dir = 1;\n \n  while (node.get_child(dir) !== null) {\n    var last = dir;\n \n    // update helpers\n    gp = p;\n    p = node;\n    node = node.get_child(dir);\n \n    var cmp = this._comparator(data, node.data);\n \n    dir = cmp > 0;\n \n    // save found node\n    if (cmp === 0) {\n      found = node;\n    }\n \n    // push the red node down\n    if (!is_red(node) && !is_red(node.get_child(dir))) {\n      if (is_red(node.get_child(!dir))) {\n        var sr = single_rotate(node, dir);\n        p.set_child(last, sr);\n        p = sr;\n      } else if (!is_red(node.get_child(!dir))) {\n        var sibling = p.get_child(!last);\n        if (sibling !== null) {\n          if (!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n            // color flip\n            p.red = false;\n            sibling.red = true;\n            node.red = true;\n          } else {\n            var dir2 = gp.right === p;\n \n            if (is_red(sibling.get_child(last))) {\n              gp.set_child(dir2, double_rotate(p, last));\n            } else if (is_red(sibling.get_child(!last))) {\n              gp.set_child(dir2, single_rotate(p, last));\n            }\n \n            // ensure correct coloring\n            var gpc = gp.get_child(dir2);\n            gpc.red = true;\n            node.red = true;\n            gpc.left.red = false;\n            gpc.right.red = false;\n          }\n        }\n      }\n    }\n  }\n \n  // replace and remove if found\n  if (found !== null) {\n    found.data = node.data;\n    p.set_child(p.right === node, node.get_child(node.left === null));\n    this.size--;\n  }\n \n  // update root and make it black\n  this._root = head.right;\n  if (this._root !== null) {\n    this._root.red = false;\n  }\n \n  return found !== null;\n};\n \nfunction is_red(node) {\n  return node !== null && node.red;\n}\n \nfunction single_rotate(root, dir) {\n  var save = root.get_child(!dir);\n \n  root.set_child(!dir, save.get_child(dir));\n  save.set_child(dir, root);\n \n  root.red = true;\n  save.red = false;\n \n  return save;\n}\n \nfunction double_rotate(root, dir) {\n  root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n  return single_rotate(root, dir);\n}\n \n//end red black tree",
        "tests": [
            {
                "input": "5\r\n4 8 15 16 23\r\n",
                "output": "5\n"
            },
            {
                "input": "12\r\n4 8 4 15 16 8 23 15 16 42 23 42\r\n",
                "output": "0\n"
            },
            {
                "input": "15\r\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\r\n",
                "output": "3\n"
            },
            {
                "input": "1\r\n4\r\n",
                "output": "1\n"
            },
            {
                "input": "1\r\n42\r\n",
                "output": "1\n"
            },
            {
                "input": "100\r\n4 42 23 23 8 42 16 23 42 16 42 8 4 23 4 4 23 42 16 42 23 23 23 42 4 42 8 8 16 23 15 23 16 4 42 15 15 23 16 15 16 4 4 15 23 42 42 15 8 23 8 23 4 15 16 15 42 8 23 16 15 42 23 8 4 16 15 16 23 16 16 4 23 16 8 23 16 15 23 4 4 8 15 4 4 15 8 23 23 4 4 8 8 4 42 15 4 4 42 16\r\n",
                "output": "64\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var a = readline().split('').map((x, iii) => {\n    return x\n  });\n  var b = readline().split('').map((x, iii) => {\n    return x\n  });\n \n  var preff = new Array(b.length + 1)\n  preff[0] = -1\n  var pos = 0\n  for (let i = 0; i < b.length; i++) {\n    while (a[pos] !== b[i]) pos++\n    preff[i + 1] = pos\n    pos++\n  }\n \n  var suff = new Array(b.length + 1)\n  suff[b.length] = a.length\n  pos = a.length\n  for (let i = b.length - 1; i >= 0; i--) {\n    while (a[pos] !== b[i]) pos--\n    suff[i] = pos\n    pos--\n  }\n \n  var max =0\n \n  for (let i = 0; i < suff.length; i++) {\n    max = Math.max(max, suff[i] -preff[i] -1)\n  }\n \n  // console.log(preff.join())\n  // console.log(suff.join())\n  console.log(max)\n  // })\n}\n \nfunction isSubSequence(str1, str2, m, n) {\n  var j = 0; // For index of str1 (or subsequence\n \n  // Traverse str2 and str1, and\n  // compare current character\n  // of str2 with first unmatched char\n  // of str1, if matched\n  // then move ahead in str1\n  for (var i = 0; i < n && j < m; i++)\n    if (str1[j] === str2[i])\n      j++;\n  // If all characters of str1 were found in str2\n  return (j === m);\n};\n ",
        "tests": [
            {
                "input": "bbaba\r\nbb\r\n",
                "output": "3\n"
            },
            {
                "input": "baaba\r\nab\r\n",
                "output": "2\n"
            },
            {
                "input": "abcde\r\nabcde\r\n",
                "output": "0\n"
            },
            {
                "input": "asdfasdf\r\nfasd\r\n",
                "output": "3\n"
            },
            {
                "input": "zywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\r\nzywmehahxlqjekqsdqjidytswwztgiowimhmffqygctzslbykurwacyvcuaplwshsluiqwuhutnwchfewwfdizttcpnqestgkfvsjylkksumaljmmkcjwwdkolmcgodcle\r\n",
                "output": "5\n"
            },
            {
                "input": "nqlswpkupyawfzygzjfntqpivmudprpmtkhwjcoabkkxfemjekxvnjikbvtbzgrxyacflvausuwgqfxvfcgxphzeiwpitswykvcsyspvimmynlyeldkqjsogjhszcqtvteiefdcissquzeynmjdhazcygrypyzjhjhsntegsuryjgpknwvnjxplztmjszidqkihuxgzc\r\nnlwkupywfzgzftqpiudprmkhwcozenmjdhacygryjhhntgugpkwvnjxplztszikihgc\r\n",
                "output": "101\n"
            },
            {
                "input": "mejfmlmclpqwopscpxxtkamtodhogweqtpigxgsbmsdvhcvyenqwsqpuxegugrgkopjwulnuqbqwqsarnymoursenotgeakbslepaacvwiydnqgnetsjaazblnriaqcmolxplvqtfdqtcmwduwrnmemtvlkgbbzkvaplprscuaqfvjlftkblwddcgwsqsfecoqibpncs\r\nm\r\n",
                "output": "199\n"
            },
            {
                "input": "kbuwmzldbajqgbdyeqqyuvdwsdzvjicqgsadjgruebcsxuhgftlykvuevsldvapqoxkrwjbwjjqquogxkpradzauxxlhrayprgnwxwumabxdojztankeqmraeqbbggrltdvcpiozbrvwhxhjpurwachimqrxrplcavtpaqzemxhrvagbngyqhacuxfbpkwqxyixdfmrj\r\nkbmrxrplcavtpaqemxhagbghacuxbpkwqxidmj\r\n",
                "output": "150\n"
            },
            {
                "input": "aplxwwvctglkkvfdyfpegleljcjtaxhdjnfonpedzeyvqprewgqwalqafebjvbjmpimoujgcfcnycugvdmgkjeaeggmnrspkydplacliklknqifoenxwxmtxsmakekewtkglligipuhpicngocrzhehelimoiocusgtuzkodlyqeetsiionfrphuoznnnobldhvjagmx\r\naplxwvctgdjfopdzevqpregwqafejvbjpmoujgccncumgkjeaeggnspdplclknifenxxmakekewgligiphingoczheheioiocustuzkodlyeesinfrpuonnobldvagmx\r\n",
                "output": "21\n"
            },
            {
                "input": "toimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\r\npgygkxrowdpcrmkcgciapxjmiqgveimnazydvnujteqdblinmpxpvxoaampesygucweptgcignwytgurgnhjtfovwusqavdtnppcxgdxyalksgkxtid\r\n",
                "output": "6\n"
            },
            {
                "input": "ziurxtzxixmsmewfuffsqdkpphssdcgybwtmzavkosqtmcntspzvftqybaldjllvgttblectspqinfdhhnpvkcbwjlqlquajueqsgymyekuswjctumsbnvvaiinxjlzcnyixfaykolkeogufvzvhnatqtelgjkqfvexghiznwubwihjkznkhepjzrnyzftmimqtlihpn\r\nzurzximmewfuffskppsdcybwmzavkosqtmctspvftybaljlgtltsqinfdhhpvkcwjlqlqymykusctumsbnvvainxjlcyxfykokeguvvhategjfxinuwihjznkhepjznzftmmqtlihpn\r\n",
                "output": "8\n"
            },
            {
                "input": "sowebxtwfdqpqkirbgcwzgglhkochlvjydmcksbenikriedfgrutoaqbnfdfzhqzacppcvznjnwmdadlxhowejzderdglkskznacjqqdrgmbnfxhmvgktivxrczqeafsapcbnjpccrbccutaabzwdtvbdpqduhbpcmlfkakimayhdqxhqvajpcfodvkmomvlimooncqi\r\nso\r\n",
                "output": "198\n"
            },
            {
                "input": "m\r\nm\r\n",
                "output": "0\n"
            },
            {
                "input": "td\r\nt\r\n",
                "output": "1\n"
            },
            {
                "input": "ipz\r\nz\r\n",
                "output": "2\n"
            },
            {
                "input": "cel\r\nc\r\n",
                "output": "2\n"
            },
            {
                "input": "xmxcpstetnnyxqbdbfsqhyjpdihhcpbxfugnmwhjadphwsialqafdvunwjqpifdqdwoxrkyetoyafjiyaosahwxfoxejwtvtousuailafdlukqfyealdakjxgfagdltxgteasiclclbdutzdxokclotgabcqbytryszetctfvfmxrfouepwyrmvnvvvhoppbcnlkdzio\r\npstnnyxqbfqhdipbxfgmaphialqdvunwjqpifdqdwoxketofjyaohxfoejwtousuaiaukqfyaldakjfgtxgeasiclcldtxokotgabqbrstcffxrfopyrmnvvhoppbcnlkdz\r\n",
                "output": "4\n"
            },
            {
                "input": "pibvxshjediuehnmfyvprhjtghzadeavjgnlvjwaqzlbexrlrnijokvqirbgfpnwwgnuptzotcdoooorqyqipbfawdslkvqrscnguydrywwzazwohlufbverfvoblvygevornmproyvsnjdxscgyrjmcqsmamfaugfmluuidnkmxbrzfzvmchopukbrlkuinxgridioo\r\npdrwwzzwohlurfvoblvygeonmpoyvjdxscjmcqsmfauguikmxbzfzmchopukbrluidioo\r\n",
                "output": "101\n"
            },
            {
                "input": "gecewmzjpvbpuvgtxiranywdxlneejahynrmfrpysxwqeymmwtotktkhncrtueulewaunbtcqnglwktiwkkkusjxhnfosjsoujaggwpuaceisnghxvgbdbeadwxshclpmocbyxqqrhthvwpedhorfeytuucbaaxrdrwvwayzadnqxfnhwkeevxzsdytxocjvpqvyxbch\r\nh\r\n",
                "output": "199\n"
            },
            {
                "input": "eseflxqdffomkoxxhdicryombxleqlvckmqfxxpwipivffhoozteiinpelbaukuifsoygjwyxjlqtazufqrafadzulucrgbtqfsxlnrvauxpojwbpgyzwentjokrkvkepazivjvtxsepruqorgmhvjfnjintftbvnqfwmapmcuilsbkmjgdulgirtpfpywawfpjpbxhy\r\nfnntftvnqwmmulbkmdgifpywfpjpxhy\r\n",
                "output": "150\n"
            },
            {
                "input": "ppneeasyjzorefvertisgxykuoqsugzppvfoubkybksuwtmmepnauteyemvtwwweftteccshepmnoxoglvpinlcduflxybdkvmjrwxcedsfjskiuxizwlckchsycmbwnlasriohmxwkkqdrpahmeuabdchfmyhbanluynzaaknssnjzbqwhudbupwhqfdvwdbhebykhg\r\nppnuqsppvfoubkybksuwtmmepnauteemvtwweftcsepmnooglvplcuxybdkvjrxcesfskiuzckchsycmwlaomxwkpahmabcmhanlknsnjzbwhudbupwdwdbhebyhg\r\n",
                "output": "21\n"
            },
            {
                "input": "izoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\r\noukzkkhwazxbaarpbybsjxlylbbjbrezlasfzvtxvcdxrltffoqwlzqwneizpoygfdcmdxzesxlsitozzrfomhggrwrcfoorvhyzdpjhakuoxdjhzaalanzwqlrtmmraleyjyxutc\r\n",
                "output": "4\n"
            },
            {
                "input": "qmrzsrvfllfraflralrwlcfjxupnlomnbeuvipcyxxmksztljxqaoqnptwwemhgswpovpnvoqajaqzxpmtqarpgdrgwuuferbhjjowmljtaoiidzkrcaawzomruigpwzgsksgdkbdbrjwaszgdwreyztdctwacfmujdgxvjqoclueiwdgvjcfpfbpmbbmcufjiitndis\r\nqmrzsrflrrwlfjxupnlmevipcyxxmkstljaoqnptweswpovpnvoqajaxptarpgdgwufbhjjoljtiidcawzorugpwzgskgddbrazdwreyztdctcujgxvjqlewvjpfpmbbcjtndis\r\n",
                "output": "7\n"
            },
            {
                "input": "trlypzzcpqrdgejwjolsefdtaceyixfdnwbphfwutzcweeqjsfqdcuftiscihqbflemognctgylfgtwqhcqjmutymwnxzoobfxopbsduyrvdaptgqecwjtliifaytgqdlbckulbyrpqfcbxmwxzboidqmzeghltlvbobpdidklzrurmfrigprxqowfjeiapiodipbhpt\r\npt\r\n",
                "output": "198\n"
            },
            {
                "input": "dexradrxekhwsmctzdqyrqctyrduvazzfybzlwdrhjdxawojhilywadneuijwuuwjbnhdjitjekszqjmnhrxulxcwfrwfzjlkzagaygllqzbehxdyiaztrcpjtvrvtmzkhvgnopwdnssyvaagatdvxgwectdpelvjmsgovdxrdeffawhwcdkospyjziiyiwyoofgnxzq\r\ndexrdekhwczqrqtyduvzzyblwhdaojhilwanijuuwbnhjitjeksqjmnhrulxwfwflkgagllbhxyiaztcpjvrvmzkhvnnsaadvxwectdpevjsgodxdefwhwcdospyjziiwoogxz\r\n",
                "output": "4\n"
            },
            {
                "input": "lyvutlpllxxqnttfihibqdntcxbmnzpyfcpfmcqiazztsesrumkfaksqieruntdgptwgzgsuwezxnzouiyducrcksnxjfnlhiekbnqxdakumkwgunlliwtnkdsletbyeqfxqeitljzgmnqqccuhasbcrarjozprcmxcqvxvjqvjfdljvhvjyrissqopfdcbsajaolxiy\r\nlvuplxntihiqdncbmpyfcfqazztsrumkfasqieuntgtgzguwxnzouiydccksnxjfhieb\r\n",
                "output": "100\n"
            },
            {
                "input": "ynqvahidlgpkijhypxuxczcgmofasasypqwmloybyaxcjetnwupkkhbfakbkyispgcntzfzokejakhkyzdnndysopyhxivzgfgpqlevpfkyusruchbturvtkmqmmkwdrcnpeotelidokcydqjgmikqwbrulezdkxjrpcfzeblkcgyivijuxquvbeofjgpjlthbiqapdm\r\ny\r\n",
                "output": "199\n"
            },
            {
                "input": "pofvbxtueyzxgzcrthooeacytrsysourmdvkfhebuqpoofbixkxrveqijcluhgaqbeljezhpeiffpeaejkvvuhbhrlhlwuwpkbmgejmrelsnzlrubrgmqowtfucbjzvqoqcbvrqqljzvlscrrulfahdijkzosggdocqmhpbszktbucsfnfurklmlnxcshtdjhrherwxr\r\npofvbxtuezgrtooacytrssoumdvkuobxr\r\n",
                "output": "151\n"
            },
            {
                "input": "rycgapxwyctxltrpateousbjtijdfsrxxgexpbiwyijynvomwanlrqbzqbkoaikqyblojwamoqlgoxxtvqatcrmhulzcubrtaguxysvepnrvtppeuzgnncusougnuzcayncuedvadkezhtkqucmfvgtdzcyhlztdtdkaiocdmtmoawzvfojvkdfzlaudxxchpnbbgtkp\r\nrycgpxwytxltrpaeusbjijdxxgexpbiwyjynvoalrbzqaikqywamoloxxtvqrmhulcubtgxysvepnrpzgnunucncuedvequfgtcyhltdtdaiodtmazfov\r\n",
                "output": "20\n"
            },
            {
                "input": "grkhejdykjmieztowpjdazxmjqlccvlwjjspiupkmhbpuvjfkncwoiastztyekhrpsfwkqwmtrznggbkfwzrtuwswbgowsemwpmssbkzorkmjauqzpsdylnhapjopgiswihierbluojvarvrakdslncrhinbjxyxptiojddnnvxsedklyjehbvsinezsppztbpqswutf\r\nrkhjdykjitopjdxmqlclwjspiupkmhbufknciatzterpsfkmtrznggbkfwzrtwswgowsempsbkzokmauzpsdynhapjpgswibljvaakslncnbjxtjddnnvxyevszspztbpqstf\r\n",
                "output": "5\n"
            },
            {
                "input": "kxzkueqzheeolprfncwxyxgqqlocajzkusopvpwowdxubsvvtfvnrkyijoxqjawzkvfkainowbxdzcxbgrywttplukaorxvtimqxonumuvsqyfobzorqqsohazhjyvscjhtlgbmetpigfzhtcjipiorcrcsvvdofflgkqzymdxbeaozrgcjxrgtkxrzpshjesucdwhds\r\nkzkqeeolprcxyxgqqloazkuspwouvvvnkyoxjzvkinowxdzbrytluaorximxnmvfoboqqsozjvschtlgbetizhcjipirccvffgkzyxbeozgctkzpsheus\r\n",
                "output": "5\n"
            },
            {
                "input": "yddetawddikawvqdrlzrupjncowrjegdlffvqomiuczkpezqtnbnuzcalfsvptfvxkwfualvarudertbhngudovyqfqfuccfspgevzqdcknlnxwphudqnbltuvvpojjxnndexpswqcwhadiyryctuychonrgfkxvemyulrelpsjvzdhfhnwugsbtkasxwchysaxervjz\r\nyd\r\n",
                "output": "198\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var array = new Array(150003).fill(0)\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\na =a.sort(sort)\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] - 1 >= 1 && array[a[i] - 1] === 0) {\n      array[a[i] - 1] = 1\n      continue\n    }\n \n    if (array[a[i]] === 0) {\n      array[a[i]] = 1\n      continue\n    }\n    if (array[a[i] + 1] === 0) {\n      array[a[i] + 1] = 1\n    }\n  }\n  var sum = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === 1) sum++\n  }\n  console.log(sum)\n  // console.log(array.join(' '))\n \n  // })\n}\nvar sort = (a, b) => a - b\n \n ",
        "tests": [
            {
                "input": "4\r\n3 2 4 1\r\n",
                "output": "4\n"
            },
            {
                "input": "6\r\n1 1 1 4 4 4\r\n",
                "output": "5\n"
            },
            {
                "input": "10\r\n8 9 4 9 6 10 8 2 7 1\r\n",
                "output": "10\n"
            },
            {
                "input": "7\r\n1 1 2 3 5 6 6\r\n",
                "output": "7\n"
            },
            {
                "input": "1\r\n1\r\n",
                "output": "1\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var a = readline().split('').map((x, iii) => {\n    return x\n  });\n  var b = readline().split('').map((x, iii) => {\n    return x\n  });\n  var left = 0\n  var max = 0\n  for (let j = a.length-1; j >= 1; j--) {\n    for (let k = 0; k < a.length - j+1; k++) {\n      var copy = a.slice()\n      copy.splice(k, j)\n      // console.log(copy.join(''), j)\n      var exist = isSubSequence(b, copy, b.length, copy.length)\n      // console.log(exist)\n      if (exist) {\n        console.log(j)\n        return\n      }\n \n    }\n  }\n  console.log(max)\n \n  // })\n}\n \nfunction isSubSequence(str1, str2, m, n) {\n  var j = 0; // For index of str1 (or subsequence\n \n  // Traverse str2 and str1, and\n  // compare current character\n  // of str2 with first unmatched char\n  // of str1, if matched\n  // then move ahead in str1\n  for (var i = 0; i < n && j < m; i++)\n    if (str1[j] === str2[i])\n      j++;\n  // If all characters of str1 were found in str2\n  return (j === m);\n};\n ",
        "tests": [
            {
                "input": "bbaba\r\nbb\r\n",
                "output": "3\n"
            },
            {
                "input": "baaba\r\nab\r\n",
                "output": "2\n"
            },
            {
                "input": "abcde\r\nabcde\r\n",
                "output": "0\n"
            },
            {
                "input": "asdfasdf\r\nfasd\r\n",
                "output": "3\n"
            },
            {
                "input": "zywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\r\nzywmehahxlqjekqsdqjidytswwztgiowimhmffqygctzslbykurwacyvcuaplwshsluiqwuhutnwchfewwfdizttcpnqestgkfvsjylkksumaljmmkcjwwdkolmcgodcle\r\n",
                "output": "5\n"
            },
            {
                "input": "nqlswpkupyawfzygzjfntqpivmudprpmtkhwjcoabkkxfemjekxvnjikbvtbzgrxyacflvausuwgqfxvfcgxphzeiwpitswykvcsyspvimmynlyeldkqjsogjhszcqtvteiefdcissquzeynmjdhazcygrypyzjhjhsntegsuryjgpknwvnjxplztmjszidqkihuxgzc\r\nnlwkupywfzgzftqpiudprmkhwcozenmjdhacygryjhhntgugpkwvnjxplztszikihgc\r\n",
                "output": "101\n"
            },
            {
                "input": "mejfmlmclpqwopscpxxtkamtodhogweqtpigxgsbmsdvhcvyenqwsqpuxegugrgkopjwulnuqbqwqsarnymoursenotgeakbslepaacvwiydnqgnetsjaazblnriaqcmolxplvqtfdqtcmwduwrnmemtvlkgbbzkvaplprscuaqfvjlftkblwddcgwsqsfecoqibpncs\r\nm\r\n",
                "output": "199\n"
            },
            {
                "input": "kbuwmzldbajqgbdyeqqyuvdwsdzvjicqgsadjgruebcsxuhgftlykvuevsldvapqoxkrwjbwjjqquogxkpradzauxxlhrayprgnwxwumabxdojztankeqmraeqbbggrltdvcpiozbrvwhxhjpurwachimqrxrplcavtpaqzemxhrvagbngyqhacuxfbpkwqxyixdfmrj\r\nkbmrxrplcavtpaqemxhagbghacuxbpkwqxidmj\r\n",
                "output": "150\n"
            },
            {
                "input": "aplxwwvctglkkvfdyfpegleljcjtaxhdjnfonpedzeyvqprewgqwalqafebjvbjmpimoujgcfcnycugvdmgkjeaeggmnrspkydplacliklknqifoenxwxmtxsmakekewtkglligipuhpicngocrzhehelimoiocusgtuzkodlyqeetsiionfrphuoznnnobldhvjagmx\r\naplxwvctgdjfopdzevqpregwqafejvbjpmoujgccncumgkjeaeggnspdplclknifenxxmakekewgligiphingoczheheioiocustuzkodlyeesinfrpuonnobldvagmx\r\n",
                "output": "21\n"
            },
            {
                "input": "toimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\r\npgygkxrowdpcrmkcgciapxjmiqgveimnazydvnujteqdblinmpxpvxoaampesygucweptgcignwytgurgnhjtfovwusqavdtnppcxgdxyalksgkxtid\r\n",
                "output": "6\n"
            },
            {
                "input": "ziurxtzxixmsmewfuffsqdkpphssdcgybwtmzavkosqtmcntspzvftqybaldjllvgttblectspqinfdhhnpvkcbwjlqlquajueqsgymyekuswjctumsbnvvaiinxjlzcnyixfaykolkeogufvzvhnatqtelgjkqfvexghiznwubwihjkznkhepjzrnyzftmimqtlihpn\r\nzurzximmewfuffskppsdcybwmzavkosqtmctspvftybaljlgtltsqinfdhhpvkcwjlqlqymykusctumsbnvvainxjlcyxfykokeguvvhategjfxinuwihjznkhepjznzftmmqtlihpn\r\n",
                "output": "8\n"
            },
            {
                "input": "sowebxtwfdqpqkirbgcwzgglhkochlvjydmcksbenikriedfgrutoaqbnfdfzhqzacppcvznjnwmdadlxhowejzderdglkskznacjqqdrgmbnfxhmvgktivxrczqeafsapcbnjpccrbccutaabzwdtvbdpqduhbpcmlfkakimayhdqxhqvajpcfodvkmomvlimooncqi\r\nso\r\n",
                "output": "198\n"
            },
            {
                "input": "m\r\nm\r\n",
                "output": "0\n"
            },
            {
                "input": "td\r\nt\r\n",
                "output": "1\n"
            },
            {
                "input": "ipz\r\nz\r\n",
                "output": "2\n"
            },
            {
                "input": "cel\r\nc\r\n",
                "output": "2\n"
            },
            {
                "input": "xmxcpstetnnyxqbdbfsqhyjpdihhcpbxfugnmwhjadphwsialqafdvunwjqpifdqdwoxrkyetoyafjiyaosahwxfoxejwtvtousuailafdlukqfyealdakjxgfagdltxgteasiclclbdutzdxokclotgabcqbytryszetctfvfmxrfouepwyrmvnvvvhoppbcnlkdzio\r\npstnnyxqbfqhdipbxfgmaphialqdvunwjqpifdqdwoxketofjyaohxfoejwtousuaiaukqfyaldakjfgtxgeasiclcldtxokotgabqbrstcffxrfopyrmnvvhoppbcnlkdz\r\n",
                "output": "4\n"
            },
            {
                "input": "pibvxshjediuehnmfyvprhjtghzadeavjgnlvjwaqzlbexrlrnijokvqirbgfpnwwgnuptzotcdoooorqyqipbfawdslkvqrscnguydrywwzazwohlufbverfvoblvygevornmproyvsnjdxscgyrjmcqsmamfaugfmluuidnkmxbrzfzvmchopukbrlkuinxgridioo\r\npdrwwzzwohlurfvoblvygeonmpoyvjdxscjmcqsmfauguikmxbzfzmchopukbrluidioo\r\n",
                "output": "101\n"
            },
            {
                "input": "gecewmzjpvbpuvgtxiranywdxlneejahynrmfrpysxwqeymmwtotktkhncrtueulewaunbtcqnglwktiwkkkusjxhnfosjsoujaggwpuaceisnghxvgbdbeadwxshclpmocbyxqqrhthvwpedhorfeytuucbaaxrdrwvwayzadnqxfnhwkeevxzsdytxocjvpqvyxbch\r\nh\r\n",
                "output": "199\n"
            },
            {
                "input": "eseflxqdffomkoxxhdicryombxleqlvckmqfxxpwipivffhoozteiinpelbaukuifsoygjwyxjlqtazufqrafadzulucrgbtqfsxlnrvauxpojwbpgyzwentjokrkvkepazivjvtxsepruqorgmhvjfnjintftbvnqfwmapmcuilsbkmjgdulgirtpfpywawfpjpbxhy\r\nfnntftvnqwmmulbkmdgifpywfpjpxhy\r\n",
                "output": "150\n"
            },
            {
                "input": "ppneeasyjzorefvertisgxykuoqsugzppvfoubkybksuwtmmepnauteyemvtwwweftteccshepmnoxoglvpinlcduflxybdkvmjrwxcedsfjskiuxizwlckchsycmbwnlasriohmxwkkqdrpahmeuabdchfmyhbanluynzaaknssnjzbqwhudbupwhqfdvwdbhebykhg\r\nppnuqsppvfoubkybksuwtmmepnauteemvtwweftcsepmnooglvplcuxybdkvjrxcesfskiuzckchsycmwlaomxwkpahmabcmhanlknsnjzbwhudbupwdwdbhebyhg\r\n",
                "output": "21\n"
            },
            {
                "input": "izoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\r\noukzkkhwazxbaarpbybsjxlylbbjbrezlasfzvtxvcdxrltffoqwlzqwneizpoygfdcmdxzesxlsitozzrfomhggrwrcfoorvhyzdpjhakuoxdjhzaalanzwqlrtmmraleyjyxutc\r\n",
                "output": "4\n"
            },
            {
                "input": "qmrzsrvfllfraflralrwlcfjxupnlomnbeuvipcyxxmksztljxqaoqnptwwemhgswpovpnvoqajaqzxpmtqarpgdrgwuuferbhjjowmljtaoiidzkrcaawzomruigpwzgsksgdkbdbrjwaszgdwreyztdctwacfmujdgxvjqoclueiwdgvjcfpfbpmbbmcufjiitndis\r\nqmrzsrflrrwlfjxupnlmevipcyxxmkstljaoqnptweswpovpnvoqajaxptarpgdgwufbhjjoljtiidcawzorugpwzgskgddbrazdwreyztdctcujgxvjqlewvjpfpmbbcjtndis\r\n",
                "output": "7\n"
            },
            {
                "input": "trlypzzcpqrdgejwjolsefdtaceyixfdnwbphfwutzcweeqjsfqdcuftiscihqbflemognctgylfgtwqhcqjmutymwnxzoobfxopbsduyrvdaptgqecwjtliifaytgqdlbckulbyrpqfcbxmwxzboidqmzeghltlvbobpdidklzrurmfrigprxqowfjeiapiodipbhpt\r\npt\r\n",
                "output": "198\n"
            },
            {
                "input": "dexradrxekhwsmctzdqyrqctyrduvazzfybzlwdrhjdxawojhilywadneuijwuuwjbnhdjitjekszqjmnhrxulxcwfrwfzjlkzagaygllqzbehxdyiaztrcpjtvrvtmzkhvgnopwdnssyvaagatdvxgwectdpelvjmsgovdxrdeffawhwcdkospyjziiyiwyoofgnxzq\r\ndexrdekhwczqrqtyduvzzyblwhdaojhilwanijuuwbnhjitjeksqjmnhrulxwfwflkgagllbhxyiaztcpjvrvmzkhvnnsaadvxwectdpevjsgodxdefwhwcdospyjziiwoogxz\r\n",
                "output": "4\n"
            },
            {
                "input": "lyvutlpllxxqnttfihibqdntcxbmnzpyfcpfmcqiazztsesrumkfaksqieruntdgptwgzgsuwezxnzouiyducrcksnxjfnlhiekbnqxdakumkwgunlliwtnkdsletbyeqfxqeitljzgmnqqccuhasbcrarjozprcmxcqvxvjqvjfdljvhvjyrissqopfdcbsajaolxiy\r\nlvuplxntihiqdncbmpyfcfqazztsrumkfasqieuntgtgzguwxnzouiydccksnxjfhieb\r\n",
                "output": "100\n"
            },
            {
                "input": "ynqvahidlgpkijhypxuxczcgmofasasypqwmloybyaxcjetnwupkkhbfakbkyispgcntzfzokejakhkyzdnndysopyhxivzgfgpqlevpfkyusruchbturvtkmqmmkwdrcnpeotelidokcydqjgmikqwbrulezdkxjrpcfzeblkcgyivijuxquvbeofjgpjlthbiqapdm\r\ny\r\n",
                "output": "199\n"
            },
            {
                "input": "pofvbxtueyzxgzcrthooeacytrsysourmdvkfhebuqpoofbixkxrveqijcluhgaqbeljezhpeiffpeaejkvvuhbhrlhlwuwpkbmgejmrelsnzlrubrgmqowtfucbjzvqoqcbvrqqljzvlscrrulfahdijkzosggdocqmhpbszktbucsfnfurklmlnxcshtdjhrherwxr\r\npofvbxtuezgrtooacytrssoumdvkuobxr\r\n",
                "output": "151\n"
            },
            {
                "input": "rycgapxwyctxltrpateousbjtijdfsrxxgexpbiwyijynvomwanlrqbzqbkoaikqyblojwamoqlgoxxtvqatcrmhulzcubrtaguxysvepnrvtppeuzgnncusougnuzcayncuedvadkezhtkqucmfvgtdzcyhlztdtdkaiocdmtmoawzvfojvkdfzlaudxxchpnbbgtkp\r\nrycgpxwytxltrpaeusbjijdxxgexpbiwyjynvoalrbzqaikqywamoloxxtvqrmhulcubtgxysvepnrpzgnunucncuedvequfgtcyhltdtdaiodtmazfov\r\n",
                "output": "20\n"
            },
            {
                "input": "grkhejdykjmieztowpjdazxmjqlccvlwjjspiupkmhbpuvjfkncwoiastztyekhrpsfwkqwmtrznggbkfwzrtuwswbgowsemwpmssbkzorkmjauqzpsdylnhapjopgiswihierbluojvarvrakdslncrhinbjxyxptiojddnnvxsedklyjehbvsinezsppztbpqswutf\r\nrkhjdykjitopjdxmqlclwjspiupkmhbufknciatzterpsfkmtrznggbkfwzrtwswgowsempsbkzokmauzpsdynhapjpgswibljvaakslncnbjxtjddnnvxyevszspztbpqstf\r\n",
                "output": "5\n"
            },
            {
                "input": "kxzkueqzheeolprfncwxyxgqqlocajzkusopvpwowdxubsvvtfvnrkyijoxqjawzkvfkainowbxdzcxbgrywttplukaorxvtimqxonumuvsqyfobzorqqsohazhjyvscjhtlgbmetpigfzhtcjipiorcrcsvvdofflgkqzymdxbeaozrgcjxrgtkxrzpshjesucdwhds\r\nkzkqeeolprcxyxgqqloazkuspwouvvvnkyoxjzvkinowxdzbrytluaorximxnmvfoboqqsozjvschtlgbetizhcjipirccvffgkzyxbeozgctkzpsheus\r\n",
                "output": "5\n"
            },
            {
                "input": "yddetawddikawvqdrlzrupjncowrjegdlffvqomiuczkpezqtnbnuzcalfsvptfvxkwfualvarudertbhngudovyqfqfuccfspgevzqdcknlnxwphudqnbltuvvpojjxnndexpswqcwhadiyryctuychonrgfkxvemyulrelpsjvzdhfhnwugsbtkasxwchysaxervjz\r\nyd\r\n",
                "output": "198\n"
            },
            {
                "input": "qwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfg\r\nqwertyuiopasdfg\r\n",
                "output": "180\n"
            },
            {
                "input": "tsypkoisgayandsuckedhisdadsdick\r\ntsypkoisgay\r\n",
                "output": "20\n"
            },
            {
                "input": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr\r\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\r\n",
                "output": "100\n"
            },
            {
                "input": "rosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefranci\r\nrosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefranci\r\n",
                "output": "100\n"
            },
            {
                "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaaa\r\n",
                "output": "27\n"
            },
            {
                "input": "abcc\r\nacc\r\n",
                "output": "1\n"
            },
            {
                "input": "kbuwmzldbajqgbdyeqqyuvdwsdzvjicqgsadjgruebcsxuhgftlykvuevsldvapqoxkrwjbwjjqquogxkpradzauxxlhrayprgnwxwumabxdojztankeqmraeqbbggrltdvcpiozbrvwhxhjpurwachimqrxrplcavtpaqzemxhrvagbngyqhacuxfbpkwqxyixdfmrj\r\nkbmrxrplcavtpaqemxhagbghacuxbpkwqxidmj\r\n",
                "output": "150\n"
            },
            {
                "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "output": "99\n"
            },
            {
                "input": "izoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\r\nizoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\r\n",
                "output": "0\n"
            },
            {
                "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n",
                "output": "100\n"
            },
            {
                "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n",
                "output": "109\n"
            },
            {
                "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n",
                "output": "111\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n    var n = parseInt(readline())\n    //   var a = new Array(n)\n    //   var marked = new Array(n).fill(false)\n    //   var found = new Array(n).fill(false)\n    var a = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\nvar g = a[0]\n    for (let i = 0; i < a.length; i++) {\n      g = gcd(g, a[i])\n    }\n    var i =1\n    var count =0\n  while (i*i<=g){\n      if(g % i ===0){\n        // console.log(i)\n        if(i!==g /i) count++\n        count++\n      }\n      i++\n  }\n    console.log(count)\n  // })\n}\n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}\n ",
        "tests": [
            {
                "input": "5\r\n1 2 3 4 5\r\n",
                "output": "1\n"
            },
            {
                "input": "6\r\n6 90 12 18 30 18\r\n",
                "output": "4\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n \n  var a = readline().split('').map((x, i) => {\n    return x\n  })\n \n  var set = {}\n  for (let i = 0; i < a.length; i++) {\n    if (!set[a[i]]) set[a[i]] = new RBTree((a, b) => a - b)\n    set[a[i]].insert(i)\n  }\n  var n = parseInt(readline())\n  for (var i = 0; i < n; i++) {\n \n    var [command, l, r] = readline().split(' ').map((x, i) => {\n      if (i === 2) return x\n      return parseInt(x)\n    })\n    l = l - 1\n    if (command === 1) {\n      set[a[l]].remove(l)\n      a[l] = r\n      if (!set[r]) set[r] = new RBTree((a, b) => a - b)\n      set[r].insert(l)\n    } else {\n      var ans = 0;\n      r--\n      alphabet.map((x) => {\n        if (set[x]) {\n \n          var value = set[x].lowerBound(l).data()\n          // console.log(l,r,value, x)\n          if (value !== null && value <= r) ans++\n        }\n      })\n      console.log(ans)\n    }\n  }\n}\n \n//start end red black tree\nfunction TreeBase() {\n}\n \n// removes all nodes from the tree\nTreeBase.prototype.clear = function () {\n  this._root = null;\n  this.size = 0;\n};\n \n// returns node data if found, null otherwise\nTreeBase.prototype.find = function (data) {\n  var res = this._root;\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      return res.data;\n    } else {\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function (data) {\n  var res = this._root;\n  var iter = this.iterator();\n \n  while (res !== null) {\n    var c = this._comparator(data, res.data);\n    if (c === 0) {\n      iter._cursor = res;\n      return iter;\n    } else {\n      iter._ancestors.push(res);\n      res = res.get_child(c > 0);\n    }\n  }\n \n  return null;\n};\n \n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function (item) {\n  var cur = this._root;\n  var iter = this.iterator();\n  var cmp = this._comparator;\n \n  while (cur !== null) {\n    var c = cmp(item, cur.data);\n    if (c === 0) {\n      iter._cursor = cur;\n      return iter;\n    }\n    iter._ancestors.push(cur);\n    cur = cur.get_child(c > 0);\n  }\n \n  for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n    cur = iter._ancestors[i];\n    if (cmp(item, cur.data) < 0) {\n      iter._cursor = cur;\n      iter._ancestors.length = i;\n      return iter;\n    }\n  }\n \n  iter._ancestors.length = 0;\n  return iter;\n};\n \n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function (item) {\n  var iter = this.lowerBound(item);\n  var cmp = this._comparator;\n \n  while (iter.data() !== null && cmp(iter.data(), item) === 0) {\n    iter.next();\n  }\n \n  return iter;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.min = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.left !== null) {\n    res = res.left;\n  }\n \n  return res.data;\n};\n \n// returns null if tree is empty\nTreeBase.prototype.max = function () {\n  var res = this._root;\n  if (res === null) {\n    return null;\n  }\n \n  while (res.right !== null) {\n    res = res.right;\n  }\n \n  return res.data;\n};\n \n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function () {\n  return new Iterator(this);\n};\n \n// calls cb on each node's data, in order\nTreeBase.prototype.each = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.next()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function (cb) {\n  var it = this.iterator(), data;\n  while ((data = it.prev()) !== null) {\n    if (cb(data) === false) {\n      return;\n    }\n  }\n};\n \n \nfunction Iterator(tree) {\n  this._tree = tree;\n  this._ancestors = [];\n  this._cursor = null;\n}\n \nIterator.prototype.data = function () {\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._minNode(root);\n    }\n  } else {\n    if (this._cursor.right === null) {\n      // no greater node in subtree, go up to parent\n      // if coming from a right child, continue up the stack\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.right === save);\n    } else {\n      // get the next node from the subtree\n      this._ancestors.push(this._cursor);\n      this._minNode(this._cursor.right);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function () {\n  if (this._cursor === null) {\n    var root = this._tree._root;\n    if (root !== null) {\n      this._maxNode(root);\n    }\n  } else {\n    if (this._cursor.left === null) {\n      var save;\n      do {\n        save = this._cursor;\n        if (this._ancestors.length) {\n          this._cursor = this._ancestors.pop();\n        } else {\n          this._cursor = null;\n          break;\n        }\n      } while (this._cursor.left === save);\n    } else {\n      this._ancestors.push(this._cursor);\n      this._maxNode(this._cursor.left);\n    }\n  }\n  return this._cursor !== null ? this._cursor.data : null;\n};\n \nIterator.prototype._minNode = function (start) {\n  while (start.left !== null) {\n    this._ancestors.push(start);\n    start = start.left;\n  }\n  this._cursor = start;\n};\n \nIterator.prototype._maxNode = function (start) {\n  while (start.right !== null) {\n    this._ancestors.push(start);\n    start = start.right;\n  }\n  this._cursor = start;\n};\n \nfunction Node(data) {\n  this.data = data;\n  this.left = null;\n  this.right = null;\n  this.red = true;\n}\n \nNode.prototype.get_child = function (dir) {\n  return dir ? this.right : this.left;\n};\n \nNode.prototype.set_child = function (dir, val) {\n  if (dir) {\n    this.right = val;\n  } else {\n    this.left = val;\n  }\n};\n \nfunction RBTree(comparator) {\n  this._root = null;\n  this._comparator = comparator;\n  this.size = 0;\n}\n \nRBTree.prototype = new TreeBase();\n \n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function (data) {\n  var ret = false;\n \n  if (this._root === null) {\n    // empty tree\n    this._root = new Node(data);\n    ret = true;\n    this.size++;\n  } else {\n    var head = new Node(undefined); // fake tree root\n \n    var dir = 0;\n    var last = 0;\n \n    // setup\n    var gp = null; // grandparent\n    var ggp = head; // grand-grand-parent\n    var p = null; // parent\n    var node = this._root;\n    ggp.right = this._root;\n \n    // search down\n    while (true) {\n      if (node === null) {\n        // insert new node at the bottom\n        node = new Node(data);\n        p.set_child(dir, node);\n        ret = true;\n        this.size++;\n      } else if (is_red(node.left) && is_red(node.right)) {\n        // color flip\n        node.red = true;\n        node.left.red = false;\n        node.right.red = false;\n      }\n \n      // fix red violation\n      if (is_red(node) && is_red(p)) {\n        var dir2 = ggp.right === gp;\n \n        if (node === p.get_child(last)) {\n          ggp.set_child(dir2, single_rotate(gp, !last));\n        } else {\n          ggp.set_child(dir2, double_rotate(gp, !last));\n        }\n      }\n \n      var cmp = this._comparator(node.data, data);\n \n      // stop if found\n      if (cmp === 0) {\n        break;\n      }\n \n      last = dir;\n      dir = cmp < 0;\n \n      // update helpers\n      if (gp !== null) {\n        ggp = gp;\n      }\n      gp = p;\n      p = node;\n      node = node.get_child(dir);\n    }\n \n    // update root\n    this._root = head.right;\n  }\n \n  // make root black\n  this._root.red = false;\n \n  return ret;\n};\n \n// returns true if removed, false if not found\nRBTree.prototype.remove = function (data) {\n  if (this._root === null) {\n    return false;\n  }\n \n  var head = new Node(undefined); // fake tree root\n  var node = head;\n  node.right = this._root;\n  var p = null; // parent\n  var gp = null; // grand parent\n  var found = null; // found item\n  var dir = 1;\n \n  while (node.get_child(dir) !== null) {\n    var last = dir;\n \n    // update helpers\n    gp = p;\n    p = node;\n    node = node.get_child(dir);\n \n    var cmp = this._comparator(data, node.data);\n \n    dir = cmp > 0;\n \n    // save found node\n    if (cmp === 0) {\n      found = node;\n    }\n \n    // push the red node down\n    if (!is_red(node) && !is_red(node.get_child(dir))) {\n      if (is_red(node.get_child(!dir))) {\n        var sr = single_rotate(node, dir);\n        p.set_child(last, sr);\n        p = sr;\n      } else if (!is_red(node.get_child(!dir))) {\n        var sibling = p.get_child(!last);\n        if (sibling !== null) {\n          if (!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n            // color flip\n            p.red = false;\n            sibling.red = true;\n            node.red = true;\n          } else {\n            var dir2 = gp.right === p;\n \n            if (is_red(sibling.get_child(last))) {\n              gp.set_child(dir2, double_rotate(p, last));\n            } else if (is_red(sibling.get_child(!last))) {\n              gp.set_child(dir2, single_rotate(p, last));\n            }\n \n            // ensure correct coloring\n            var gpc = gp.get_child(dir2);\n            gpc.red = true;\n            node.red = true;\n            gpc.left.red = false;\n            gpc.right.red = false;\n          }\n        }\n      }\n    }\n  }\n \n  // replace and remove if found\n  if (found !== null) {\n    found.data = node.data;\n    p.set_child(p.right === node, node.get_child(node.left === null));\n    this.size--;\n  }\n \n  // update root and make it black\n  this._root = head.right;\n  if (this._root !== null) {\n    this._root.red = false;\n  }\n \n  return found !== null;\n};\n \nfunction is_red(node) {\n  return node !== null && node.red;\n}\n \nfunction single_rotate(root, dir) {\n  var save = root.get_child(!dir);\n \n  root.set_child(!dir, save.get_child(dir));\n  save.set_child(dir, root);\n \n  root.red = true;\n  save.red = false;\n \n  return save;\n}\n \nfunction double_rotate(root, dir) {\n  root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n  return single_rotate(root, dir);\n}\n \n//end red black tree",
        "tests": [
            {
                "input": "abacaba\r\n5\r\n2 1 4\r\n1 4 b\r\n1 5 b\r\n2 4 6\r\n2 1 7\r\n",
                "output": "3\n1\n2\n"
            },
            {
                "input": "dfcbbcfeeedbaea\r\n15\r\n1 6 e\r\n1 4 b\r\n2 6 14\r\n1 7 b\r\n1 12 c\r\n2 6 8\r\n2 1 6\r\n1 7 c\r\n1 2 f\r\n1 10 a\r\n2 7 9\r\n1 10 a\r\n1 14 b\r\n1 1 f\r\n2 1 11\r\n",
                "output": "5\n2\n5\n2\n6\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  // var [n, k] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // });\n  var a = readline()\n  var b = readline()\n \n  var perm = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  // var abc = ['a', 'b', 'c']\n  // for (let i = 0; i < 2; i++) {\n  //   for (let j = 0; j < 2; j++) {\n  //     for (let k = 0; k < 2; k++) {\n  //       var s = abc[i % 3] + abc[j % 3] + abc[k % 3]\n  //       perm.push(s)\n  //     }\n  //   }\n  // }\n \n  for (let i = 0; i < perm.length; i++) {\n    // var string = perm[i]\n    var toCompare = perm[i][0].repeat(n)\n    toCompare += perm[i][1].repeat(n)\n    toCompare += perm[i][2].repeat(n)\n    // var toCompare = string.repeat(n)\n    if (!toCompare.includes(b) && !toCompare.includes(a)) {\n      console.log('YES')\n      return console.log(toCompare)\n    }\n    toCompare = perm[i].repeat(n)\n    if (!toCompare.includes(b) && !toCompare.includes(a)) {\n      console.log('YES')\n      return console.log(toCompare)\n    }\n  }\n  console.log('NO')\n \n \n  // })\n}\n \n ",
        "tests": [
            {
                "input": "2\r\nab\r\nbc\r\n",
                "output": "YES\naaccbb\n"
            },
            {
                "input": "3\r\naa\r\nbc\r\n",
                "output": "YES\nacbacbacb\n"
            },
            {
                "input": "1\r\ncb\r\nac\r\n",
                "output": "YES\nabc\n"
            },
            {
                "input": "1\r\nab\r\ncb\r\n",
                "output": "YES\nbac\n"
            },
            {
                "input": "3\r\nbb\r\ncb\r\n",
                "output": "YES\nabcabcabc\n"
            },
            {
                "input": "4\r\naa\r\nbb\r\n",
                "output": "YES\nabcabcabcabc\n"
            },
            {
                "input": "4\r\naa\r\nbc\r\n",
                "output": "YES\nacbacbacbacb\n"
            },
            {
                "input": "4\r\nbc\r\nca\r\n",
                "output": "YES\naaaaccccbbbb\n"
            },
            {
                "input": "10\r\naa\r\naa\r\n",
                "output": "YES\nabcabcabcabcabcabcabcabcabcabc\n"
            },
            {
                "input": "10\r\nac\r\nab\r\n",
                "output": "YES\nbbbbbbbbbbccccccccccaaaaaaaaaa\n"
            },
            {
                "input": "10\r\nbb\r\nbc\r\n",
                "output": "YES\nacbacbacbacbacbacbacbacbacbacb\n"
            },
            {
                "input": "20\r\nca\r\nab\r\n",
                "output": "YES\naaaaaaaaaaaaaaaaaaaaccccccccccccccccccccbbbbbbbbbbbbbbbbbbbb\n"
            },
            {
                "input": "20\r\ncc\r\nac\r\n",
                "output": "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n"
            },
            {
                "input": "20\r\nab\r\nbb\r\n",
                "output": "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n"
            },
            {
                "input": "100\r\nab\r\nac\r\n",
                "output": "YES\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n"
            },
            {
                "input": "100\r\naa\r\nba\r\n",
                "output": "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n"
            },
            {
                "input": "100\r\nbc\r\nbb\r\n",
                "output": "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var [n, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  // while (i < 2 * 10e5 + 1) {\n  //   answers.push(i)\n  //   i = i * 2\n  // }\n \n  var min = Number.MAX_SAFE_INTEGER\n \n  var object = new Array(2 * 10e4 + 1)\n  for (let j = 0; j < 2 * 10e4 + 1; j++) {\n    object[j] = []\n  }\n \n  for (let j = 0; j < n; j++) {\n    var count = 0\n    var val = a[j]\n    while (val > 0) {\n      object[val].push(count)\n      val = Math.floor(val / 2)\n      count++\n    }\n  }\n  // for (let j = 0; j < 2 * 10e4 + 1; j++) {\n  //   if (object[j] >= k) return console.log(0)\n  // }\n \n  for (let j = 0; j < 2 * 10e4 + 1; j++) {\n    if (object[j].length < k) continue\n    object[j] = object[j].sort((a, b) => a - b)\n    // console.log(object[j])\n    var sum = 0\n    for (let i = 0; i < k; i++) {\n      sum += object[j][i]\n    }\n    min = Math.min(min, sum)\n  }\n \n  // console.log(answers)\n  console.log(min)\n \n  // })\n}\n \n ",
        "tests": [
            {
                "input": "5 3\r\n1 2 2 4 5\r\n",
                "output": "1\n"
            },
            {
                "input": "5 3\r\n1 2 3 4 5\r\n",
                "output": "2\n"
            },
            {
                "input": "5 3\r\n1 2 3 3 3\r\n",
                "output": "0\n"
            },
            {
                "input": "1 1\r\n1337\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var [n, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  var answers = [0]\n  var i = 1\n \n  // while (i < 2 * 10e5 + 1) {\n  //   answers.push(i)\n  //   i = i * 2\n  // }\n  for (let j = 0; j < a.length; j++) {\n    var val = a[j]\n    while (val !== 0) {\n      answers.push(val)\n      val = Math.floor(val / 2)\n    }\n  }\n  a = a.sort((a, b) => a - b)\n  var min = Number.MAX_SAFE_INTEGER\n \n  var object = new Array(2 * 10e4 + 1).fill(0)\n  for (let j = 0; j < n; j++) {\n    object[a[j]]++\n  }\n  for (let j = 0; j < 2 * 10e4 + 1; j++) {\n    if (object[j] >= k) return console.log(0)\n  }\n \n  for (let j = 0; j < answers.length; j++) {\n    var arrays = []\n    for (let i = 0; i < n; i++) {\n      var val = a[i]\n      var sum1 = 0\n      while (val > answers[j]) {\n        sum1++\n        val = Math.floor(val / 2)\n      }\n      if (val === answers[j]) {\n        arrays.push(sum1)\n      }\n      // console.log(count, k, answers[j])\n      // if (count === k) break\n    }\n \n    if (arrays.length >= k) {\n      var sum = 0\n      arrays = arrays.sort((a, b) => a - b)\n      for (let l = 0; l < k; l++) {\n        sum += arrays[l]\n      }\n      min = Math.min(sum, min)\n    }\n \n    // console.log(min)\n \n  }\n  // console.log(answers)\n  console.log(min)\n \n  // })\n}\n \n ",
        "tests": [
            {
                "input": "5 3\r\n1 2 2 4 5\r\n",
                "output": "1\n"
            },
            {
                "input": "5 3\r\n1 2 3 4 5\r\n",
                "output": "2\n"
            },
            {
                "input": "5 3\r\n1 2 3 3 3\r\n",
                "output": "0\n"
            },
            {
                "input": "1 1\r\n1337\r\n",
                "output": "0\n"
            },
            {
                "input": "50 2\r\n72548 51391 1788 171949 148789 151619 19225 8774 52484 74830 20086 51129 151145 87650 108005 112019 126739 124087 158096 59027 34500 87415 115058 194160 171792 136832 1114 112592 171746 199013 101484 182930 185656 154861 191455 165701 140450 3475 160191 122350 66759 93252 60972 124615 119327 108068 149786 8698 63546 187913\r\n",
                "output": "12\n"
            },
            {
                "input": "50 2\r\n3 6 10 1 14 5 26 11 6 1 23 43 7 23 20 11 15 11 2 1 8 37 2 19 31 18 2 4 15 84 9 29 38 46 9 21 2 2 13 114 28 9 6 20 14 46 4 20 39 99\r\n",
                "output": "0\n"
            },
            {
                "input": "50 2\r\n199995 199977 199982 199979 199998 199991 199999 199976 199974 199971 199966 199999 199978 199987 199989 199995 199968 199987 199988 199987 199987 199998 199988 199958 199985 199999 199997 199939 199992 199999 199985 199994 199987 199965 199947 199991 199993 199997 199998 199994 199971 199999 199999 199990 199993 199983 199983 199999 199970 199952\r\n",
                "output": "0\n"
            },
            {
                "input": "50 7\r\n155076 162909 18349 8937 38161 128479 127526 128714 164477 163037 130796 160247 17004 73321 175301 175796 79144 75670 46299 197255 10139 2112 195709 124860 6485 137601 63708 117985 94924 65661 113294 85898 7511 137431 115791 66126 146803 121145 96379 126408 195646 70033 131093 86487 94591 3086 59652 188702 27036 78631\r\n",
                "output": "79\n"
            },
            {
                "input": "50 7\r\n1 2 27 54 6 15 24 1 9 28 3 26 8 12 7 6 8 54 23 8 7 13 18 10 1 33 24 10 34 13 12 9 16 11 36 50 39 9 8 10 2 5 6 4 7 67 21 12 6 55\r\n",
                "output": "3\n"
            },
            {
                "input": "50 7\r\n199961 199990 199995 199997 199963 199995 199985 199994 199974 199974 199997 199991 199993 199982 199991 199982 199963 200000 199994 199997 199963 199991 199947 199996 199994 199995 199995 199990 199972 199973 199980 199955 199984 199998 199998 199992 199986 199986 199997 199995 199987 199958 199982 199998 199996 199995 199979 199943 199992 199993\r\n",
                "output": "7\n"
            },
            {
                "input": "50 25\r\n162847 80339 131433 130128 135933 64805 74277 145697 92574 169638 26992 155045 32254 97675 177503 143802 44012 171388 185307 33652 194764 80214 169507 71832 180118 117737 198279 89826 9941 120250 158894 31871 616 190147 159249 158867 131076 77551 95165 54709 51376 145758 74581 26670 48775 29351 4750 55294 129850 19793\r\n",
                "output": "364\n"
            },
            {
                "input": "50 25\r\n19 1 17 6 4 21 9 16 5 21 2 12 17 11 54 18 36 20 34 17 32 1 4 14 26 11 6 2 7 5 2 3 12 16 20 5 16 1 18 55 16 20 2 3 2 12 65 20 7 11\r\n",
                "output": "43\n"
            },
            {
                "input": "50 25\r\n199970 199997 199998 199988 199999 199981 200000 199990 199974 199985 199932 200000 199966 199999 199999 199951 199983 199975 199974 199996 199974 199992 199979 199995 199955 199989 199960 199975 199983 199990 199950 199952 199999 199999 199962 199939 199979 199977 199962 199996 199910 199997 199976 200000 199999 199997 199998 199973 199996 199917\r\n",
                "output": "125\n"
            },
            {
                "input": "50 50\r\n86175 169571 61423 53837 33228 49923 87369 11875 167105 101762 128203 19011 191596 19500 11213 950 192557 164451 58008 34390 39704 128606 191084 14227 57911 129189 124795 42481 69510 59862 146348 57352 158069 68387 196697 46595 84330 168274 88721 191842 155836 39164 195031 53880 188281 11150 132256 87853 179233 135499\r\n",
                "output": "780\n"
            },
            {
                "input": "50 50\r\n8 63 44 78 3 65 7 27 13 45 7 5 18 94 25 17 26 10 21 44 5 13 6 30 10 11 44 14 71 17 10 5 4 9 8 21 4 9 25 18 3 14 15 8 7 11 5 28 9 1\r\n",
                "output": "167\n"
            },
            {
                "input": "50 50\r\n199987 199984 199987 199977 199996 199923 199984 199995 199991 200000 199998 199990 199983 199981 199973 199989 199981 199993 199959 199994 199973 199962 199998 199970 199999 199981 199996 199996 199985 199980 199959 199990 199982 199987 199992 199997 199985 199976 199947 199998 199962 199987 199984 199982 199999 199997 199985 199992 199979 199974\r\n",
                "output": "450\n"
            },
            {
                "input": "50 1\r\n156420 126738 188531 85575 23728 72842 190346 24786 118328 137944 126942 115577 175247 85409 146194 31398 189417 52337 135886 162083 146559 131125 31741 152481 57935 26624 106893 55028 81626 99143 182257 129556 100261 11429 156642 27997 105720 173400 140250 164944 26466 132034 86679 190160 161138 179688 2975 149862 38336 67959\r\n",
                "output": "0\n"
            },
            {
                "input": "50 4\r\n29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30 29 16 86 40 24 1 6 15 7 30\r\n",
                "output": "0\n"
            },
            {
                "input": "5 3\r\n2 2 2 2 2\r\n",
                "output": "0\n"
            },
            {
                "input": "7 3\r\n1 1 1 1 1 1 1\r\n",
                "output": "0\n"
            },
            {
                "input": "5 2\r\n4 4 4 4 4\r\n",
                "output": "0\n"
            },
            {
                "input": "5 3\r\n4 4 4 4 4\r\n",
                "output": "0\n"
            },
            {
                "input": "7 4\r\n3 3 3 3 3 3 3\r\n",
                "output": "0\n"
            },
            {
                "input": "10 6\r\n7 7 7 7 7 7 7 7 7 7\r\n",
                "output": "0\n"
            },
            {
                "input": "4 2\r\n9 9 9 9\r\n",
                "output": "0\n"
            },
            {
                "input": "4 2\r\n3 3 3 3\r\n",
                "output": "0\n"
            },
            {
                "input": "5 2\r\n3 3 3 3 3\r\n",
                "output": "0\n"
            },
            {
                "input": "4 2\r\n2 2 2 2\r\n",
                "output": "0\n"
            },
            {
                "input": "5 2\r\n9 9 9 9 9\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n \nfunction main() {\n \n  var n = parseInt(readline())\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  var max = 0\n  var b = []\n  var sum = 0\n  for (let i = 0; i < n; i++) {\n    if (a[i] > max) max = a[i]\n  }\n  var g = max - a[0]\n  for (let i = 0; i < n; i++) {\n    g = gcd(g, max - a[i])\n    sum += a[i]\n  }\n \n  var ans = n\n \n \n  console.log((max * n - sum) / g, g)\n  // console.log()\n \n  // }\n}\n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}\n \n// class TreeSet {\n//\n//   constructor(compatator) {\n//     this.length = 0;\n//     this.elements = [];\n//     if (compatator)\n//       this.compatator = compatator;\n//     else\n//       this.compatator = function (a, b) {\n//         return a - b\n//       };\n//   }\n//\n//   size() {\n//     return this.elements.length;\n//   }\n//\n//   last() {\n//     return this.elements[this.length - 1];\n//   }\n//\n//   first() {\n//     return this.elements[0];\n//   }\n//\n//   isEmpty() {\n//     return this.size() === 0;\n//   }\n//\n//   pollLast() {\n//     if (this.length > 0) {\n//       this.length--;\n//       return this.elements.splice(this.length, 1);\n//     }\n//     return null;\n//   }\n//\n//   pollFirst() {\n//     if (this.length > 0) {\n//       this.length--;\n//       return this.elements.splice(0, 1);\n//     }\n//     return null;\n//   }\n//\n//   add(element) {\n//     let index = this.binarySearch(element);\n//     if (index < 0) {\n//       index = -index - 1;\n//     }\n//     this.elements.splice(index, 0, element);\n//     this.length++;\n//   }\n//\n//   /**\n//    * Performs a binary search of value in array\n//    * @param {number[]} array - Array in which value will be searched. It must be sorted.\n//    * @param {number} value - Value to search in array\n//    * @return {number} If value is found, returns its index in array. Otherwise, returns a negative number indicating where the value should be inserted: -(index + 1)\n//    */\n//   binarySearch(value) {\n//     var low = 0;\n//     var high = this.elements.length - 1;\n//\n//     while (low <= high) {\n//       var mid = (low + high) >>> 1;\n//       var midValue = this.elements[mid];\n//       var cmp = this.compatator(midValue, value);\n//       if (cmp < 0) {\n//         low = mid + 1;\n//       } else if (cmp > 0) {\n//         high = mid - 1;\n//       } else {\n//         return mid;\n//       }\n//     }\n//\n//     return low + 1;\n//   }\n// }\n \nfunction find(value, a) {\n  var l = -1\n  var r = a.length\n  while (r > l + 1) {\n    var m = Math.floor((r + l) / 2)\n    // console.log(a[m], f, l, r)\n    if (a[m] < value) l = m\n    if (a[m] >= value) r = m\n  }\n  return r\n}",
        "tests": [
            {
                "input": "3\r\n3 12 6\r\n",
                "output": "5 3\n"
            },
            {
                "input": "2\r\n2 9\r\n",
                "output": "1 7\n"
            },
            {
                "input": "7\r\n2 1000000000 4 6 8 4 2\r\n",
                "output": "2999999987 2\n"
            },
            {
                "input": "6\r\n13 52 0 13 26 52\r\n",
                "output": "12 13\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = BigInt(readline())\n  //\n  var [n, c] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var b = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  var dp = new Array(n + 1)\n  for (let i = 0; i < n + 1; i++) {\n    dp[i] = new Array(2).fill(Number.MAX_SAFE_INTEGER)\n  }\n  dp[0][0] = 0\n  dp[0][1] = c\n  for (let i = 0; i < n; i++) {\n    dp[i + 1][0] = Math.min(dp[i + 1][0], dp[i][0] + a[i])\n    dp[i + 1][0] = Math.min(dp[i + 1][0], dp[i][1] + a[i])\n    dp[i + 1][1] = Math.min(dp[i + 1][1], dp[i][0] + b[i] + c)\n    dp[i + 1][1] = Math.min(dp[i + 1][1], dp[i][1] + b[i])\n  }\n  var ans = new Array(n)\n  for (let i = 0; i < n; i++) {\n    ans[i] = Math.min(dp[i][0], dp[i][1])\n \n  }\n  console.log(ans.join(' '))\n}",
        "tests": [
            {
                "input": "10 2\r\n7 6 18 6 16 18 1 17 17\r\n6 9 3 10 9 1 10 1 5\r\n",
                "output": "0 7 13 18 24 35 36 37 40 45\n"
            },
            {
                "input": "10 1\r\n3 2 3 1 3 3 1 4 1\r\n1 2 3 4 4 1 2 1 3\r\n",
                "output": "0 2 4 7 8 11 13 14 16 17\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = BigInt(readline())\n  //\n  var [n, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  var mark = new Array(201).fill(0)\n  var a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    var [l, r] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n    for (let j = l; j <= r; j++) {\n      mark[j]++\n    }\n    a[i] = [l, r]\n    a[i].pos = i + 1\n  }\n \n  var used = new Array(n).fill(false)\n  var cpunt = 0\n  var ans = []\n \n  for (let i = 0; i < 201; i++) {\n    if (mark[i] > k) {\n      var jj = i\n      // while (mark[jj] === mark[i]) jj++\n      // jj--\n      l = i\n      var max = -1\n      var maxI = i\n      r = jj\n      for (let j = 0; j < a.length; j++) {\n        if (a[j][0] <= l && a[j][1] >= r && !used[j]) {\n          if (a[j][1]> max) {\n            max = a[j][1]\n            maxI = j\n          }\n        }\n      }\n      used[maxI] = true\n      for (let m = a[maxI][0]; m <= a[maxI][1]; m++) {\n        mark[m]--\n      }\n \n      cpunt++\n      ans.push(a[maxI].pos)\n      i=-1\n    }\n \n  }\n  console.log(ans.length)\n  if (ans.length === 0) return\n  console.log(ans.join(' '))\n  // console.log(mark)\n}",
        "tests": [
            {
                "input": "7 2\r\n11 11\r\n9 11\r\n7 8\r\n8 9\r\n7 8\r\n9 11\r\n7 9\r\n",
                "output": "3\n7 4 1\n"
            },
            {
                "input": "5 1\r\n29 30\r\n30 30\r\n29 29\r\n28 30\r\n30 30\r\n",
                "output": "3\n1 4 2\n"
            },
            {
                "input": "6 1\r\n2 3\r\n3 3\r\n2 3\r\n2 2\r\n2 3\r\n2 3\r\n",
                "output": "4\n1 3 5 6\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  a = a.sort((a, b) => a - b)\n  var b = []\n  var c = []\n \n  for (let i = 0; i < Math.floor(n / 2); i++) {\n    b.push(a[i])\n  }\n  for (let i = Math.floor(n / 2); i < n; i++) {\n    c.push(a[i])\n  }\n \n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) a[i] = c[Math.floor(i / 2)]\n    if (i % 2 === 1) a[i] = b[Math.floor(i / 2)]\n  }\n  var ans = 0\n  for (let i = 1; i < n - 1; i++) {\n    if (a[i - 1] > a[i] && a[i + 1] > a[i]) ans++\n  }\n  console.log(ans)\n  console.log(a.join(' '))\n//   // })\n}",
        "tests": [
            {
                "input": "7\r\n1 3 2 2 4 5 4\r\n",
                "output": "3\n3 1 4 2 4 2 5\n"
            },
            {
                "input": "1\r\n1\r\n",
                "output": "0\n1\n"
            },
            {
                "input": "2\r\n1000000000 1000000000\r\n",
                "output": "0\n1000000000 1000000000\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 10e3 + 1\nvar iv = new Array(maxN + 1).fill(0n)\niv[1] = 1n\nfor (let i = 2n; i <= maxN; i++) {\n  iv[i] = mod - (mod / i * iv[mod % i]) % mod\n}\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n \n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var [n, m] = readline().split(' ').map((x, iii) => {\n    return BigInt(x)\n  });\n  var ans = 1n\n  for (let i = 1n; i <= n + 2n * m - 1n; i++) {\n    ans = (ans * i) % mod\n  }\n  // console.log(ans)\n  for (let i = 1n; i <= 2n * m; i++) {\n    ans = (ans * iv[i]) % mod\n  }\n  for (let i = 1n; i <= n - 1n; i++) {\n    ans = (ans * iv[i]) % mod\n  }\n  console.log(ans.toString())\n  // })\n}\n ",
        "tests": [
            {
                "input": "2 2\r\n",
                "output": "5\n"
            },
            {
                "input": "10 1\r\n",
                "output": "55\n"
            },
            {
                "input": "723 9\r\n",
                "output": "157557417\n"
            },
            {
                "input": "1000 10\r\n",
                "output": "414070642\n"
            },
            {
                "input": "1000 1\r\n",
                "output": "500500\n"
            },
            {
                "input": "1 1\r\n",
                "output": "1\n"
            },
            {
                "input": "1 10\r\n",
                "output": "1\n"
            },
            {
                "input": "1000 2\r\n",
                "output": "917124963\n"
            },
            {
                "input": "1 2\r\n",
                "output": "1\n"
            },
            {
                "input": "678 7\r\n",
                "output": "778650919\n"
            },
            {
                "input": "398 8\r\n",
                "output": "725195161\n"
            },
            {
                "input": "526 2\r\n",
                "output": "226076855\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  var x = parseInt(readline())\n  //\n  Array(parseInt(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    //   var a = new Array(n)\n    //   var marked = new Array(n).fill(false)\n    //   var found = new Array(n).fill(false)\n    var a = readline().split('').map((x, iii) => {\n      return x\n    });\n    var b = readline().split('').map((x, iii) => {\n      return x\n    });\n    var position = {}\n    for (let i = 0; i < a.length; i++) {\n      if (!position[a[i]]) position[a[i]] = []\n      position[a[i]].push(i)\n    }\n \n    var pos = -1\n    var exist = true\n    var ans = 1\n// console.log(position)\n    for (let i = 0; i < b.length; i++) {\n      if (!position[b[i]]) {\n        exist = false\n        break\n      }\n \n      var j = 0\n      j = find(pos, position[b[i]])\n      // while (position[b[i]][j] <= pos && j < position[b[i]].length) j++\n      // console.log(pos, position[b[i]], j)\n \n      if (j === position[b[i]].length) {\n        ans++\n        pos = position[b[i]][0]\n        continue\n      }\n      pos = position[b[i]][j]\n    }\n \n    if (!exist) return console.log(-1)\n    console.log(ans)\n  })\n}\n \n \nfunction find(value, a) {\n  var l = -1\n  var r = a.length\n  while (r > l + 1) {\n    var m = Math.floor((r + l) / 2)\n    // console.log(a[m], f, l, r)\n    if (a[m] <= value) l = m\n    if (a[m] > value) r = m\n  }\n  return r\n}",
        "tests": [
            {
                "input": "3\r\naabce\r\nace\r\nabacaba\r\naax\r\nty\r\nyyt\r\n",
                "output": "1\n-1\n3\n"
            },
            {
                "input": "11\r\na\r\naaaaaaaaaaa\r\ncba\r\nabcabcabcabcabcabcabc\r\nbvdhsdvlbelrivbhxbhie\r\nx\r\nabacabadabacaba\r\nabacabadabacaba\r\nabacabadabacaba\r\nbaabaabcaa\r\naabab\r\naaababbbaaaabbab\r\nt\r\ny\r\nu\r\nu\r\nabcdefghijk\r\nkjihgfedcba\r\nabcdefghijk\r\nkjihgfdecba\r\nabb\r\nababbbbb\r\n",
                "output": "11\n15\n1\n1\n1\n5\n-1\n1\n11\n10\n4\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  var x = parseInt(readline())\n  //\n  Array(parseInt(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    //   var a = new Array(n)\n    //   var marked = new Array(n).fill(false)\n    //   var found = new Array(n).fill(false)\n    var [n, x] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n \n \n    var count = euler(x/gcd(x,n))\n    console.log(count)\n  })\n}\n \nfunction euler(x) {\n  var ans = x\n  for (let i = 2; i * i <= x; i++) {\n    if (x % i === 0) {\n      ans = ans / i\n      ans = ans * (i - 1)\n      while (x % i === 0) {\n        x = x / i\n      }\n    }\n  }\n \n  if (x > 1) {\n    ans /= x\n    ans *= x - 1\n  }\n  return ans\n}\n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}",
        "tests": [
            {
                "input": "3\r\n4 9\r\n5 10\r\n42 9999999967\r\n",
                "output": "6\n1\n9999999966\n"
            },
            {
                "input": "10\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n1 8\r\n7 9\r\n8 10\r\n1 11\r\n",
                "output": "1\n2\n2\n4\n1\n6\n4\n6\n4\n10\n"
            },
            {
                "input": "10\r\n20 52\r\n48 53\r\n36 54\r\n23 55\r\n14 56\r\n54 57\r\n34 58\r\n33 59\r\n10 60\r\n21 61\r\n",
                "output": "12\n52\n2\n40\n2\n18\n28\n58\n2\n60\n"
            },
            {
                "input": "10\r\n37 102\r\n78 103\r\n31 104\r\n7 105\r\n80 106\r\n52 107\r\n26 108\r\n1 109\r\n40 110\r\n85 111\r\n",
                "output": "32\n102\n48\n8\n52\n106\n18\n108\n10\n72\n"
            },
            {
                "input": "10\r\n119 152\r\n144 153\r\n41 154\r\n69 155\r\n57 156\r\n91 157\r\n21 158\r\n54 159\r\n105 160\r\n79 161\r\n",
                "output": "72\n16\n60\n120\n24\n156\n78\n52\n16\n132\n"
            },
            {
                "input": "10\r\n36 202\r\n79 203\r\n4 204\r\n140 205\r\n73 206\r\n41 207\r\n61 208\r\n200 209\r\n118 210\r\n75 211\r\n",
                "output": "100\n168\n32\n40\n102\n132\n96\n180\n48\n210\n"
            },
            {
                "input": "10\r\n164 252\r\n94 253\r\n171 254\r\n196 255\r\n35 256\r\n174 257\r\n251 258\r\n239 259\r\n9 260\r\n98 261\r\n",
                "output": "36\n220\n126\n128\n128\n256\n84\n216\n96\n168\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 998244353n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var [n, m, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var pow10 = [];\n  pow10[0] = 1n\n  for (let i = 1; i < 2 * 10e4 + 2; i++) {\n    pow10[i] = (pow10[i - 1] * 10n) % mod\n  }\n \n  var ans = []\n  var res = 0\n  for (let i = 1; i <= n; i++) {\n    // console.log(n - i - 2)\n    res = (2n * 9n * pow10[n - i]) % mod + (BigInt((n - i - 1) * 81) * (pow10[n - i - 1]? pow10[n - i - 1] : 1n)) % mod\n    ans[i - 1] = res % mod\n  }\n  ans[n - 1] = 10\n  // ans[n - 2] = 180\n  // console.log(ans.length)\n  // console.log(pow(3))\n  console.log(ans.join(' '))\n}",
        "tests": [
            {
                "input": "1\r\n",
                "output": "10\n"
            },
            {
                "input": "2\r\n",
                "output": "180 10\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 10e6 + 1\n \nfunction main() {\n  // var x = parseInt(readline())\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  //   var n = parseInt(readline())\n  //   var a = new Array(n)\n  //   var marked = new Array(n).fill(false)\n  //   var found = new Array(n).fill(false)\n  var [n, m, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var a = new Array(k)\n  for (let i = 0; i < k; i++) {\n    a[i] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n  }\n  var b = new Array(k)\n  for (let i = 0; i < k; i++) {\n    b[i] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    });\n  }\n \n  var ans = []\n  for (let i = 0; i < n - 1; i++) {\n    ans.push('D')\n  }\n  for (let i = 0; i < m - 1; i++) {\n    ans.push('L')\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m - 1; j++) {\n      ans.push(i % 2 === 0 ? 'R' : 'L')\n    }\n    ans.push('U')\n  }\n  console.log(ans.length)\n  console.log(ans.join(''))\n}",
        "tests": [
            {
                "input": "3 3 2\r\n1 2\r\n2 1\r\n3 3\r\n3 2\r\n",
                "output": "13\nDDLLRRULLURRU\n"
            },
            {
                "input": "5 4 3\r\n3 4\r\n3 1\r\n3 3\r\n5 3\r\n1 3\r\n1 4\r\n",
                "output": "27\nDDDDLLLRRRULLLURRRULLLURRRU\n"
            },
            {
                "input": "1 1 10\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "output": "1\nU\n"
            },
            {
                "input": "10 10 20\r\n7 5\r\n4 5\r\n5 4\r\n7 4\r\n1 5\r\n6 7\r\n9 5\r\n8 4\r\n1 4\r\n2 10\r\n3 10\r\n4 10\r\n3 6\r\n5 7\r\n6 2\r\n1 1\r\n10 9\r\n7 6\r\n1 4\r\n6 4\r\n8 2\r\n8 3\r\n5 1\r\n10 4\r\n4 2\r\n1 9\r\n1 10\r\n9 5\r\n2 2\r\n6 7\r\n8 6\r\n8 9\r\n4 2\r\n7 8\r\n3 3\r\n4 2\r\n6 10\r\n9 4\r\n10 2\r\n7 7\r\n",
                "output": "118\nDDDDDDDDDLLLLLLLLLRRRRRRRRRULLLLLLLLLURRRRRRRRRULLLLLLLLLURRRRRRRRRULLLLLLLLLURRRRRRRRRULLLLLLLLLURRRRRRRRRULLLLLLLLLU\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  // const x = readline();\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  var [n, m] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n  var b = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  });\n \n  var max = 0\n  for (let i = 0; i < n; i++) {\n    var min = a[i]\n    for (let j = 0; j < m; j++) {\n      if ((b[j] & a[i]) < min) min = b[j] & a[i]\n    }\n    max = Math.max(max, min)\n  }\n  var ans = 0\n  var add = 0\n  var exist\n  var answer\n  for (let k = 0; k < 513; k++) {\n    answer = true\n    for (let i = 0; i < n; i++) {\n      exist = false\n      for (let j = 0; j < m; j++) {\n        if ((b[j] & a[i] | k) === k) {\n          exist = true\n        }\n      }\n      if (!exist) answer = false\n \n      // console.log('minminmin')\n      // console.log(add)\n      // console.log(ans)\n \n    }\n    if (answer) {\n      return console.log(k)\n    }\n  }\n}\n \n ",
        "tests": [
            {
                "input": "4 2\r\n2 6 4 0\r\n2 4\r\n",
                "output": "2\n"
            },
            {
                "input": "7 6\r\n1 9 1 9 8 1 0\r\n1 1 4 5 1 4\r\n",
                "output": "0\n"
            },
            {
                "input": "8 5\r\n179 261 432 162 82 43 10 38\r\n379 357 202 184 197\r\n",
                "output": "147\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  // const x = readline();\n  //\n  // Array(parseInt(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n \n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n \n  var map = {}\n  var sum = 0\n  var x = 0\n  var y = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      sum = a[i] + a[j]\n      if (!map[sum]) map[sum] = `${i}:${j}`\n      else {\n        [x, y] = map[sum].split(':').map(x => parseInt(x))\n        if (x !== i && x !== j && y !== i && y !== j) {\n          console.log('YES')\n          console.log(i + 1, j + 1, x + 1, y + 1)\n          return\n        }\n      }\n    }\n  }\n  console.log('NO')\n \n \n  // if(n>=1) ans-=a[n-1]\n  // console.log(a)\n \n  // })\n}\n \nfunction gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n \n  return gcd(b, a % b);\n}\n ",
        "tests": [
            {
                "input": "6\r\n2 1 5 2 7 4\r\n",
                "output": "YES\n2 3 1 6\n"
            },
            {
                "input": "5\r\n1 3 1 9 20\r\n",
                "output": "NO\n"
            },
            {
                "input": "4\r\n2 2 1 3\r\n",
                "output": "YES\n3 4 1 2\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  // const x = readline();\n  // var [n, k, l] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n \n  // Array(Number(x)).fill(1).map((t, iii) => {\n  var n = parseInt(readline())\n  // var [a, b, c] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n  //\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n \n  var graph = new Array(n)\n  for (let i = 0; i < n; i++) {\n    if (i - a[i] >= 0) {\n      if (!graph[i - a[i]]) graph[i - a[i]] = []\n      graph[i - a[i]].push(i)\n    }\n \n    if (i + a[i] < n) {\n      if (!graph[i + a[i]]) graph[i + a[i]] = []\n      graph[i + a[i]].push(i)\n    }\n  }\n  var dp = new Array(n)\n  var even = []\n  for (let i = 0; i < n; i++) {\n    if (a[i] % 2 === 0) {\n      dp[i] = 0\n      even.push(i)\n    } else dp[i] = -1\n  }\n  // console.log(dp)\n \n  for (let i = 0; i < even.length; i++) {\n    var element = even[i]\n    if (!graph[element]) continue\n    for (let j = 0; j < graph[element].length; j++) {\n      // console.log(j, element, graph[element][j])\n      if (dp[graph[element][j]] === -1) {\n        dp[graph[element][j]] = dp[element] + 1\n        even.push(graph[element][j])\n      }\n    }\n  }\n  var ans = new Array(n)\n  for (let i = 0; i < n; i++) {\n    if (a[i] % 2 === 1) {\n      ans[i] = dp[i]\n    }\n  }\n// for even number\n  dp = new Array(n)\n  var odd = new Array(n)\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 2 === 1) {\n      dp[i] = 0\n      odd.push(i)\n    } else dp[i] = -1\n  }\n \n  for (let i = 0; i < odd.length; i++) {\n    var element = odd[i]\n    if (!graph[element]) continue\n    for (let j = 0; j < graph[element].length; j++) {\n      if (dp[graph[element][j]] === -1) {\n        dp[graph[element][j]] = dp[element] + 1\n        dp[graph[element][j]] = dp[element] + 1\n        odd.push(graph[element][j])\n      }\n    }\n  }\n \n  for (let i = 0; i < a.length; i++) {\n    if(a[i] % 2===0) ans[i] = dp[i]\n  }\n \n  // console.log(dp)\n  console.log(ans.join(' '))\n \n  // })\n}\n ",
        "tests": [
            {
                "input": "10\r\n4 5 7 6 7 5 4 4 6 4\r\n",
                "output": "1 1 1 2 -1 1 1 3 1 1\n"
            },
            {
                "input": "100\r\n10 3 10 3 5 4 10 9 9 8 7 10 3 10 8 9 7 7 8 10 7 8 3 10 4 5 10 10 3 9 10 6 9 9 7 6 10 4 3 8 7 7 3 9 9 8 7 5 4 5 3 8 4 4 5 3 9 6 9 9 6 9 3 4 5 6 5 10 5 4 6 10 3 4 4 8 8 3 9 7 8 10 6 5 8 3 4 6 8 9 8 9 4 3 10 8 8 10 7 3\r\n",
                "output": "1 2 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 3 1 1 2 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 2 1 1 1 3 1 3 2 3 2 2 1\n"
            },
            {
                "input": "100\r\n12 18 18 10 13 13 20 14 20 13 12 13 18 13 14 13 14 20 16 14 14 11 11 17 20 13 18 14 15 19 15 18 13 14 11 18 12 13 18 10 20 11 11 15 12 15 18 14 20 14 18 14 14 19 10 11 19 19 15 19 14 16 11 14 17 18 15 20 19 19 10 10 15 12 19 11 16 13 11 19 15 13 10 15 17 12 13 15 18 12 10 16 14 14 11 16 17 10 15 19\r\n",
                "output": "2 2 2 1 1 1 3 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 1 2 2 1 2 1 1 1 2 1 1 2 1 1 1 2 1 2 1 1 1 3 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 2 2 1 1 1 1 2 1 2 1 2 1 3 2 1 1 1 1 1 3 1 2 1 3 2\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  const n = parseInt(readline());\n  // var [n, k] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n \n  // Array(Number(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  // var [a, b, c] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n  //\n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n \n  var dp = new Array(n + 1)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(2).fill(1)\n  }\n  for (let i = 0; i < n; i++) {\n    if (a[i] < a[i + 1]) {\n      dp[i + 1][0] = Math.max(dp[i + 1][0], dp[i][0] + 1)\n      dp[i + 1][1] = Math.max(dp[i + 1][1], dp[i][1] + 1)\n \n    }\n    if (i + 2 <= n - 1 && a[i] < a[i + 2]) {\n      // dp[i + 1][0] = Math.max(dp[i + 1][0], dp[i][0] + 1)\n      dp[i + 2][1] = Math.max(dp[i + 2][1], dp[i][0] + 1)\n    }\n \n    // if (i - 1 >= 0 && a[i - 1] < a[i + 1]) {\n    //   dp[i + 1][1] = Math.max(dp[i + 1][1], dp[i - 1][0] + 1)\n    // }\n  }\n  var ans = 0\n  for (let i = 0; i < n; i++) {\n    ans = Math.max(ans, dp[i][1])\n    ans = Math.max(ans, dp[i][0])\n  }\n  console.log(ans)\n  // console.log(dp)\n \n  // var ans = Math.abs(a-b)+Math.abs(a-c)+Math.abs(c-b)\n  var val = 0\n \n  // })\n}\n ",
        "tests": [
            {
                "input": "5\r\n1 2 5 3 4\r\n",
                "output": "4\n"
            },
            {
                "input": "2\r\n1 2\r\n",
                "output": "2\n"
            },
            {
                "input": "7\r\n6 5 4 3 2 4 3\r\n",
                "output": "2\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  // const x = readline();\n  var [n, k] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n \n  // Array(Number(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  // var [a, b, c] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n  //\n  var a = readline().split('').map((x, iii) => {\n    return x\n  })\n  var array = readline().split(' ').map((x, iii) => {\n    return x\n  })\n \n  var count = 0\n  var ans = 0\n  for (let i = 0; i < n; i++) {\n \n    if (array.includes(a[i])) {\n      count++\n    } else {\n      ans += count * (count + 1) / 2\n      // console.log(count, ans)\n      count = 0\n    }\n  }\n  if (count !== 0) ans += count * (count + 1) / 2\n  // console.log(count, ans)\n \n  console.log(ans)\n \n  // var ans = Math.abs(a-b)+Math.abs(a-c)+Math.abs(c-b)\n  var val = 0\n \n  // })\n}\n ",
        "tests": [
            {
                "input": "7 2\r\nabacaba\r\na b\r\n",
                "output": "12\n"
            },
            {
                "input": "10 3\r\nsadfaasdda\r\nf a d\r\n",
                "output": "21\n"
            },
            {
                "input": "7 1\r\naaaaaaa\r\nb\r\n",
                "output": "0\n"
            },
            {
                "input": "200 13\r\nvgfjhgkgwkftaeqejmbgildembgxdbskxfndwmcckjfkbeekxkgakmcjhclqsecpnkaigcxxhfghgegfadjktckftdhtifriemfifakygoesjfginnddjjklwiwlbjsgftwhtjdxmcadpvhaeddxwnmguwhetwbmffbmvdvuhecgjckddrbikgwkrfwfhdhqolidgkfm\r\na b c d e f g h i j k l m\r\n",
                "output": "578\n"
            },
            {
                "input": "200 13\r\nqownuutwuwqnrxxtnlvnqtroztwpnvunynwrzzpsotnrqwxqstxnnzosszovtznquvxwvunpvxqzvyrwxwpxvxnnzzuzarepcqxzrseqqorwpuntzvwqnwuvvuygnpgrrznvootrtcvtxnoowywptwzvwrqwpxusuxqznvoqpnxsrquuzorkxvuwvpxyntrqywqvotuf\r\na b c d e f g h i j k l m\r\n",
                "output": "10\n"
            },
            {
                "input": "200 13\r\nuzqrruuwunntqnotxvtyzoqooznonqyvrpnzppvtowswpyvutsyynrrsozsswrnnzsxwrqrwuqwswxnxyxwqqsssoqvoortnxvtswtuxywnrnzutstvnqyutptxxtrzvxuwxstqqqvztqtnzrynwzuvosonnvquvpxunwpstpxvuqropxynytvvsxxsvuzvsusysrxpx\r\na b c d e f g h i j k l m\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  // const x = readline();\n  var [n, k, l] = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n \n  // Array(Number(x)).fill(1).map((t, iii) => {\n  // var n = parseInt(readline())\n  // var [n, m] = readline().split(' ').map((x, iii) => {\n  //   return parseInt(x)\n  // })\n \n  var a = readline().split(' ').map((x, iii) => {\n    return parseInt(x)\n  })\n  a = a.sort((a, b) => a - b)\n  var i = 0\n  while (a[i] <= a[0] + l) i++\n  var count = i\n  // console.log(count)\n \n  if (count < n) return console.log(0)\n \n  var ans = 0\n  for (let i = 0; i < n; i++) {\n    var index = Math.min(i * k, count - (n - i))\n    ans += a[index]\n  }\n  console.log(ans)\n  // })\n}\n ",
        "tests": [
            {
                "input": "4 2 1\r\n2 2 1 2 3 2 2 3\r\n",
                "output": "7\n"
            },
            {
                "input": "2 1 0\r\n10 10\r\n",
                "output": "20\n"
            },
            {
                "input": "1 2 1\r\n5 2\r\n",
                "output": "2\n"
            },
            {
                "input": "3 2 1\r\n1 2 3 4 5 6\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n  const x = readline();\n  //\n  Array(Number(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    var [n, m] = readline().split(' ').map((x, iii) => {\n      return parseInt(x)\n    })\n \n    var a = readline().split(' ').map((x, iii) => {\n      return parseInt(x) - 1\n    })\n \n    var stopIndex = n\n    for (let i = 0; i < n; i++) {\n      if (a[i] !== i) stopIndex = i\n    }\n    // console.log('stopIndexstopIndexstopIndexstopIndex')\n    // console.log(a)\n    // console.log(stopIndex)\n    var rr = new Array(m).fill(1)\n    var pp = new Array(m).fill(1)\n \n    for (let i = 0; i < m; i++) {\n      var [r, p] = readline().split(' ').map((x, iii) => {\n        if (iii === 1) return parseFloat(x)\n        return parseInt(x)\n      })\n      rr[i] = r\n      pp[i] = p\n    }\n \n    if (stopIndex === n) return console.log(1)\n \n    var ans = 1\n    for (let i = 0; i < m; i++) {\n      if (rr[i]>stopIndex) ans *= (1 - pp[i])\n      // console.log(ans)\n    }\n    console.log(1 - ans)\n \n  })\n}\n ",
        "tests": [
            {
                "input": "4\r\n4 3\r\n4 3 2 1\r\n1 0.3\r\n3 1\r\n4 0.6\r\n5 3\r\n4 2 1 3 5\r\n3 0.8\r\n4 0.6\r\n5 0.3\r\n6 5\r\n1 3 2 4 5 6\r\n4 0.9\r\n5 0.3\r\n2 0.4\r\n6 0.7\r\n3 0.5\r\n4 2\r\n1 2 3 4\r\n2 0.5\r\n4 0.1\r\n",
                "output": "0.6\n0.72\n0.9895\n1\n"
            },
            {
                "input": "4\r\n9 1\r\n1 2 3 4 5 6 7 8 9\r\n6 0.000000\r\n6 1\r\n1 2 3 4 5 6\r\n1 0.000033\r\n4 1\r\n1 2 3 4\r\n1 0.000048\r\n15 1\r\n2 1 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n6 0.000097\r\n",
                "output": "1\n1\n1\n0.00009700000000001374\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\nvar mod = 1000000000n + 7n\nvar maxN = 1002\n \nfunction main() {\n    // const x = readline();\n \n    // Array(Number(x)).fill(1).map((t, iii) => {\n    var n = parseInt(readline())\n    var a = readline().split(' ').map((x, iii) => {\n        return parseInt(x)\n    })\n    var count = new Array(n + 2).fill(0)\n    for (let i = 0; i < n; i++) {\n        count[a[i]]++\n    }\n    var b = count.slice()\n \n    var max = 0\n    for (let i = 0; i < n + 2; i++) {\n \n        if (i - 1 >= 0 && b[i - 1] > 0) {\n            max++\n            b[i - 1]--\n            continue\n        }\n        if (b[i] > 0) {\n            max++\n            b[i]--\n            continue\n        }\n        if (i + 1 < n + 2 && b[i + 1] > 0) {\n            max++\n            b[i + 1]--\n            continue\n        }\n    }\n \n \n    b = count.slice()\n    var min = 0\n    for (let i = 0; i < n+2; i++) {\n        if(b[i] !==0) {\n            i=i+2\n            min++\n        }\n    }\n \n \n    console.log(min, max)\n    // console.log(where)\n}\n \nfunction checkString(a) {\n    // console.log(a)\n    var count = 0\n    var res = true\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '(') count++\n        else {\n            count--\n            if (count < 0) res = false\n        }\n    }\n    if (count !== 0) res = false\n \n    return res\n \n}",
        "tests": [
            {
                "input": "4\r\n1 2 4 4\r\n",
                "output": "2 4\n"
            },
            {
                "input": "9\r\n1 1 8 8 8 4 4 4 4\r\n",
                "output": "3 8\n"
            },
            {
                "input": "7\r\n4 3 7 1 4 3 3\r\n",
                "output": "3 6\n"
            },
            {
                "input": "1\r\n1\r\n",
                "output": "1 1\n"
            },
            {
                "input": "2\r\n1 1\r\n",
                "output": "1 2\n"
            },
            {
                "input": "2\r\n1 2\r\n",
                "output": "1 2\n"
            },
            {
                "input": "9\r\n9 5 7 9 6 4 6 4 8\r\n",
                "output": "2 8\n"
            },
            {
                "input": "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "output": "4 10\n"
            },
            {
                "input": "10\r\n6 6 6 6 6 6 6 6 6 6\r\n",
                "output": "1 3\n"
            },
            {
                "input": "10\r\n10 7 10 10 7 10 7 7 10 10\r\n",
                "output": "2 6\n"
            },
            {
                "input": "10\r\n6 8 9 6 5 9 4 8 8 6\r\n",
                "output": "2 8\n"
            },
            {
                "input": "10\r\n8 8 1 1 1 2 7 7 8 4\r\n",
                "output": "3 9\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n \n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, iii) => {\n        var n = parseInt(readline())\n        var x = new Array(n)\n        // for (let i = 0; i < n; i++) {\n        //     var [xx, yy] = readline().split(' ').map((x, iii) => {\n        //         return parseInt(x)\n        //     })\n        //     x[i] = {x: xx, y: yy}\n        // }\n        // x = x.sort((a, b) => {\n        //     if (a.x - b.x === 0)\n        //         return a.y - b.y\n        //     return a.x - b.x\n        // })\n        // var res = []\n        for (let i = 2; i*i*i <= n; i++) {\n            for (let j = i + 1; i*j*j <= n; j++) {\n                if(n%(i*j) !==0 ) continue\n                var c = n / (i * j)\n                if (c !== j && c !== i && c > 2) {\n                    console.log('YES')\n                    console.log(i, j, c)\n                    return\n                }\n            }\n        }\n        console.log('NO')\n        // console.log(res.join(''))\n    })\n}\n ",
        "tests": [
            {
                "input": "5\r\n64\r\n32\r\n97\r\n2\r\n12345\r\n",
                "output": "YES\n2 4 8\nNO\nNO\nNO\nYES\n3 5 823\n"
            },
            {
                "input": "100\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n",
                "output": "NO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 4\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 5\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 6\nNO\nNO\nNO\nYES\n2 4 5\nNO\nYES\n2 3 7\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 8\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 9\nNO\nYES\n2 4 7\nNO\nNO\nNO\nYES\n2 3 10\nNO\nNO\nNO\nYES\n2 4 8\nNO\nYES\n2 3 11\nNO\nNO\nNO\nYES\n2 5 7\nNO\nYES\n2 3 12\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 13\nNO\nYES\n2 4 10\nNO\nNO\nNO\nYES\n2 3 14\nNO\nNO\nNO\nYES\n2 4 11\nNO\nYES\n2 3 15\nNO\nNO\nNO\nNO\nNO\nYES\n2 3 16\nNO\nNO\nNO\nYES\n2 5 10\nNO\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    // var n = parseInt(readline())\n    var [n, m] = readline().split(' ').map((x, iii) => {\n        return parseInt(x)\n    })\n    var s = readline().split('').map((x, iii) => {\n        return x\n    })\n \n \n    var t = readline().split('').map((x, iii) => {\n        return x\n    })\n    // console.log(s)\n    // console.log(t)\n    var pos1 = {}, pos2 = {}\n    var j = 0\n    for (let i = 0; i < m; i++) {\n        while (t[i] !== s[j]) j++\n        pos1[i] = j\n        j++\n    }\n    j = n - 1\n    // console.log('-----')\n    for (let i = m-1; i >=0; i--) {\n        while (t[i] !== s[j] && j>=0) {\n            j--\n        }\n        pos2[i] = j\n        j--\n \n    }\n    var max = 1\n    for (let i = 0; i < m-1; i++) {\n        max = Math.max(max, Math.abs(pos2[i+1] - pos1[i]))\n    }\n \n    // console.log(pos1)\n    // console.log(pos2)\n    console.log(max)\n}",
        "tests": [
            {
                "input": "5 3\r\nabbbc\r\nabc\r\n",
                "output": "3\n"
            },
            {
                "input": "5 2\r\naaaaa\r\naa\r\n",
                "output": "4\n"
            },
            {
                "input": "5 5\r\nabcdf\r\nabcdf\r\n",
                "output": "1\n"
            },
            {
                "input": "2 2\r\nab\r\nab\r\n",
                "output": "1\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    // const n = readline();\n \n    // Array(Number(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    //\n    // var map = {}\n    // var [n, a, b, k] = readline().split(' ').map((x, i) => {\n    //     return parseInt(x)\n    // })\n    var maxN = 2e5+1\n    var mod = 998244353n\n \n    var iv = new Array(maxN + 1).fill(0)\n    iv[1] = 1n\n    for (let i = 2n; i <= maxN; i++) {\n        iv[i] = mod - (mod / i * iv[mod % i]) % mod\n    }\n    var [n, m] = readline().split(' ').map((x, i) => {\n \n        return BigInt(x)\n    })\n \n    var ans = 1n\n    var f1 = 1\n    var f2 = 1\n    var f3 = 1\n    var f2n = 1\n \n    for (let i = 1; i <= n - 2n; i++) {\n        ans = (ans * 2n) % mod\n    }\n \n    for (let i = 1n; i <= m; i++) {\n        ans = (ans * i) % mod\n    }\n \n    for (let i = 1n; i <= n - 1n; i++) {\n        // console.log(ans)\n \n        ans = (ans * iv[i]) % mod\n    }\n \n    for (let i = 1n; i <= m - n + 1n; i++) {\n        ans = (ans * iv[i]) % mod\n    }\n    ans = ans * (n - 2n) % mod\n    ans = (ans * iv[2]) % mod;\n \n    // console.log(f1, f2)\n    console.log(ans.toString())\n    // console.log(ans2 / btm)\n    // console.log(dp)\n}\n ",
        "tests": [
            {
                "input": "3 4\r\n",
                "output": "6\n"
            },
            {
                "input": "3 5\r\n",
                "output": "10\n"
            },
            {
                "input": "42 1337\r\n",
                "output": "806066790\n"
            },
            {
                "input": "100000 200000\r\n",
                "output": "707899035\n"
            },
            {
                "input": "150000 200000\r\n",
                "output": "270223789\n"
            },
            {
                "input": "2 2\r\n",
                "output": "0\n"
            },
            {
                "input": "3 3\r\n",
                "output": "3\n"
            },
            {
                "input": "3 200000\r\n",
                "output": "35012940\n"
            },
            {
                "input": "200000 200000\r\n",
                "output": "668956439\n"
            },
            {
                "input": "20 20\r\n",
                "output": "47185920\n"
            },
            {
                "input": "2 3\r\n",
                "output": "0\n"
            },
            {
                "input": "1000 200000\r\n",
                "output": "664520775\n"
            },
            {
                "input": "2 10\r\n",
                "output": "0\n"
            },
            {
                "input": "7 14\r\n",
                "output": "240240\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    // const n = readline();\n \n    // Array(Number(x)).fill(1).map((t, iii) => {\n    var n = parseInt(readline())\n    //\n    // var map = {}\n    // var [n, a, b, k] = readline().split(' ').map((x, i) => {\n    //     return parseInt(x)\n    // })\n \n    var a = readline().split('').map((x, i) => {\n \n        return x\n    })\n    var left = 'a'\n    var right = 'a'\n    var res = []\n    for (let i = 0; i < n; i++) {\n        if (a[i] >= left) {\n            left = a[i]\n            res.push(0)\n        } else if (a[i] >= right) {\n            right = a[i]\n            res.push(1)\n        } else {\n            console.log('NO')\n            return\n        }\n    }\n    console.log('YES')\n    console.log(res.join(''))\n \n    // console.log(kk)\n    // console.log(dp)\n}\n ",
        "tests": [
            {
                "input": "9\r\nabacbecfd\r\n",
                "output": "YES\n001010101\n"
            },
            {
                "input": "8\r\naaabbcbb\r\n",
                "output": "YES\n00000011\n"
            },
            {
                "input": "7\r\nabcdedc\r\n",
                "output": "NO\n"
            },
            {
                "input": "5\r\nabcde\r\n",
                "output": "YES\n00000\n"
            },
            {
                "input": "200\r\nraaaaabbbccccccccccdddddeeeeeeeeeeeeeeffffffffffggggggggghhhhhiiiiiiiiijjjjkkkkkkkkkkllllllllmmmmmmmmnnnnnnnooooooooppppppqqqqqqqqqqrrrrrrrrssssttttttttttuuuuuuuuvvvvvvwwwwwwxxxxxxxyyyyyyyzzzzzzzzzzzz\r\n",
                "output": "YES\n01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000\n"
            },
            {
                "input": "200\r\nazaaaaaabbbbbbbcccccccccdeeeeeeefffffffgggggggghhhhhhiijjjjjkkkkkkkkkllllllmmmmmmmmmmmmnnnnnnoooooopppppppppppqqqqqrrrrrrrrrrrrrssssssssssstttttttttttuuuuuuuuvvvvvvvwwwwwwwwwxxxxxxxyyyyyyyyyyyyzzzzzzz\r\n",
                "output": "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000\n"
            },
            {
                "input": "200\r\naaaaaaaaaaaabbbbccccccdddddddeeeeeeffgggggggggggghhhhhhiiiiiiiiiiiijjjjjjjjjkkkkklllllllmmmmmmmmnnnnnnnnoooooooopppppppppqqqqqrrrrrrrrrssssssssssttuuuuuuuvvvvvvvvvvwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzw\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n"
            },
            {
                "input": "200\r\ncnaaaaaabbbbbccccdddddddddddddeeeeeeeeefffffffgggggggggghhhhhhhhhiiijjjjjkkkkkkklllllllmmmmmmmnnnnnnnnnooooooooooooppppppppqqqqqqqqqqqrrrssssssstuuuuuuuuvvvvvvvvvvvvwwwwwwxxxxxxxxyyyyyyyzzzzzzzzzzzzzz\r\n",
                "output": "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n"
            },
            {
                "input": "200\r\naaawaaaabbbbccccccccddddddddddeeeeeeeffffffffffgggggggggghhhhhhhhiiiiiiiiijjjjjjjkkkkkkkkklllllllmmmmmmmmnnnnnnooooooooppppppppqqqqrrrrrrrsssssssttttttuuuuuuuuuvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyzzzzzzzzzz\r\n",
                "output": "YES\n00001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n"
            },
            {
                "input": "200\r\naaaaabbbbbbbbbbbccccccdddddddddeeeeeefffffffffggggggggggggggghhhhhhhhhiiiiijjjjjjjjjjjkkkkkklllllllmmmmmmmmmnnnnnnnnnnoooooppppppqqqqqqqrrrrrssssssstttttuuuuuuuuvvvvwwwwwwwwwwwwxxxxxxyyyyyyzzzzzzzzzmu\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011\n"
            },
            {
                "input": "200\r\nfhrvyaaaaaaaaabbbbbbbccccccccccdddddeeeeeeeeeeeeefffffggggggghhiiiiiiiiiiiijjjjjkkkklllllllmmmmmmmmnnnnnoooooppppppppqqqrrrrrrrrrrsssssssstttttttttttttuuuuuuuvvvvvvwwwwwwwwwwwwwwxxxxxxyyyyyyyyzzzzzzzz\r\n",
                "output": "YES\n00000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000\n"
            },
            {
                "input": "200\r\naacdaeabblbxbbbbbbcccccdddddeeeeeeefffffffggggggghhhhhhhhhiiiiiiiiiijjjjjjjkkkkkkkklllllllllmmmmmmmmnnnoooooooopppppqqqqqqqqqqqrrrrrrrrrrsstttttttttuuuuuuuvvvvvvvvvvwwwwwwwxxxxxxxxxxxyyyyyyyyyzzzzzzzz\r\n",
                "output": "YES\n00001011101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000\n"
            },
            {
                "input": "200\r\naaaaaabbbbbbbbbbbbbccccccccccccdddeeeeeeffffggghhhhhhhhhiiiiiiiijjjjjjjjjjkkkkklllllmmmmmmmmmnnnnnnnoooooooppppppppqqqqqqrrrrrrrrrsssssssttttttttuuuuuuuuvvvvvvvvwwwwwwxxxxxxxyyyyyyyyyyzzzzzzzzzzzeinuy\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111\n"
            },
            {
                "input": "200\r\nbdimoqrstvaaaaaaaaabbbbbbbbbbcccccddddddeeeeeeeeeeeeeeeffffffgggggggghhhhhhhhhiiiiiiiijjjjjjjjjjjjkkkkkkkklllllllllmmmmmmmmnnnnnoooooooppppppqqqqqqrrrrrrrrssssssstttttuuvvvvvvwwwwwwwwxxxxxxxyyyyyyyzzz\r\n",
                "output": "YES\n00000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n"
            },
            {
                "input": "200\r\naaaaeillaoobbwbbxbzbbcccccccdddddddddeeeeeeeffffffffggggghhhhhiiiijjjjjjjkkkkklllllmmmmmmmmmnnnnnnnnnnnnnooooooooppppqqqqqqqqqqrrrrrrrrrrrsssssssssttttttttttuuuuuuuvvvvvvvwwwwwwwxxxxxxyyyyzzzzzzzzzzzz\r\n",
                "output": "YES\n00000000100110110101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000\n"
            },
            {
                "input": "200\r\naaaaaaaaaabbbbbccccccccccccccdddddddddeeeeeeefffffffffgggggghhhhhhiiiiiiijjjjjjjjjjkkkkkkllllllllmmmmmmmmnnnnnnoooooooppppppqqqqqqqqqqqrrrrrrsssssssttttttttuuuuuuvvvvvwwwwwxxxyyyyzzzzzzzzzzzcddddjksvw\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111\n"
            },
            {
                "input": "200\r\naaaabbbbcceefffgghhhhijjllnnnnopqrrsstuuvvvwwxxyyyaaaabbbbbbbbcccdddddeeeeeefffffggggghhhhhhhhhiiiiiiiiijjjjkkkkkkllllllmmmmmmmnnnnnoooooooopppppppqqqrrrrrrsssssstttttuuuuuuuvvvvvwwwxxxxxyyyyzzzzzzzzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n"
            },
            {
                "input": "200\r\naaaaabbaaaaabcbebebbccecccffgjklccmcmnccoccooddoqqqdddqderreerrsfffsfsfghuuhhhvhhhhvviwixixixxixijjjxjyjzzjzkkklllllmmmmmmmnnnnnnnoooooppppppppppppqqqqqrrrrrrrsssssstttuuuvvvvvvvwwwwwwxxxyyyyyyyyyzzzz\r\n",
                "output": "YES\n00000001111100101011110111000000110100110110011000011101100110001110101110011101111001010101001011110101001011111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000\n"
            },
            {
                "input": "200\r\naaaabbbbbbcccccdddddeeeeeeeffffggggggggghhhhhiiiiijjjjjjjkkkkkkkkllmmmmmmmmmmnnoooooppppqqqqqrrrrrrsssssttttttttttttuuuvvvvvwwwwwwxxxxxxxxyyyzzzzzzzzzaccddddeeffgjjjjkkklllllmmmmnnooppqrrsssttwwxyyzzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111000\n"
            },
            {
                "input": "200\r\naaaabbbbbbccccddddefffffgghhhiiiiiiiiijjjjjkkklmmmmnnnnnnooopppppppprrrstuuuuuuvvvvvvvwwxxxxyyyyyyzzaabbbbbbcccdddddddddeffggggghhhhhhiiijjjjjjkkkkllllmmmnnnoopqqqrrssssttttuuuvvvvvwwwwwxxxxyyyyyzzzzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n"
            },
            {
                "input": "200\r\naaaaaaabcbbbbcccccdccdcdddddeeddeeeeeeeeeefffffffggghgghghhhhhhhihhhiiiiiiiijijijjjjkjkkkkkkkklkkllllllllmmmmmmmmmmmnnnnnnnnoooppnqnnqoqroooorsoppqqstttqruuurruvrrvvtvttvvtuwvwwwwxxxwxyzzxzzyyzzyyzzzz\r\n",
                "output": "YES\n00000000011110000001101000000011000000000000000000000110100000000111000000000101000001000000000110000000000000000000000000000000010110100111100111110000110001100110010110011010000000100001001100110000\n"
            },
            {
                "input": "200\r\naaaabccccdddddddeefffffffgghhhiiiiiijjjjjjjkkkkkllllmmmmnnnnnoooooooppqqqqqrrrrsssttuuuuuvwwxxyyyzzzaaaaaabbbbbccccddddddeefffffffggghhiiiikkllmmnnnnnnoooooppppqqqqrrrrsttttuuuuuvvvvwwwwwwxxxxyyyzzzzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n"
            },
            {
                "input": "200\r\naaaaaaaaabbbbcccccccccccdddeeeeeeeefffgggghhhhhhhhiiiiiiijjjjjjjkkklllmmmmmnnnnnnnoooooppppppppqqqqrrrrrrrssssssttttuuuuuuvvvvvwwwwxxxxxxyyyyyzzzzzzzzaabbbcccdeeefggggghhhhiijjjjkllnpqqqrrsssstuuvwyzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111100\n"
            },
            {
                "input": "200\r\naaaabbbbabcaccaadbebfbbbfgbbggchhcccchhhcccicjdkkldldddldmdenoeeooffpppfqrfffuuufggguvgggvggwghhxhyyyhhhhzhiiiiiiijjjjjjjkkkllmmmnnnooooppppppppppppqqqqrssssttttttuuuvvvvwwwwwwwwxxxxxxxxyyyyzzzzzzzzzz\r\n",
                "output": "YES\n00000000100100110101011100110010011110001110101000101110101100110011000100111000111100111011011101000111101111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000\n"
            },
            {
                "input": "200\r\naaaabccdeffgghhijklllmnnnoopqrrrrssssssttuuvvvwxyyaaaabbbcccccddddddeeeeeeffffgggggghhhhiiiiiiiiiiijjjjjjjjjkkkkllmmmmmmmmnnoooooooooooppppppppppqqqqqqrrrsssstttttuuuuvvvvwwwwwwwxxxxxxxxxyyyyyyyyyyzzz\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n"
            },
            {
                "input": "200\r\naaaaaaabbbbbbcccccccccdddddddeeeeffffffggggghhhhhiiiiiiiijjjjkkkkkllllllllmmmmmmmmmnnnnnnnnnooooooooopppppppppqqqqqqqqrrrrrrrrrrrsssssssttttuuvvvvvvvvvvwwwwwwwxxxxxxyyyyyyzzzzzbceghhhijjjmmooqrrttvvwx\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111\n"
            },
            {
                "input": "200\r\naaaaaadeafgibbbbbbjbjlncpccccsdsdddtdtdtdeetuevwwezzefffffgggghhhhhhhiijjjjjjjjkkklllllllmmmmmmmmmmmmmnnnnnnnooooooooopppppppppppppqqqqrrrrrrsssssssttttttttttuuuuuuuuuvvvvvvvwwwwwwxxxxxyyyyyyyyyzzzzzz\r\n",
                "output": "YES\n00000000100011111101000101111010111010101110010001001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000\n"
            },
            {
                "input": "200\r\naadfgghjjjkmnpqqtuuwwxyzaaaaaaaabbbbbbbbcccccddddeeeeeeeeeffgggghhhhhhiiiiiiiijjjjjjjjkkkkklllllmmmmmmmmmmmnnnnnoooooppppppppqqqqqqqqrrrrrrrrrrrssssstttttttttuuuuuuuuvvvvvvvwwwwwwxxxxxxxyyyyyzzzzzzzzz\r\n",
                "output": "YES\n00000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000\n"
            },
            {
                "input": "200\r\naaaaaaaaaabbbbbbccccccddddddddddddeeeeeeeeeeffffffffggggghhhhhhiiijjjjjjkkkkkklllllllllllllmmmmmmmnnnnnooooooooooppppppppppqqqqqqqqqrrrrrrrrsssssstttttttttuuuuvvvvvvwwwwwwwwwwwxxxxxyyyyyyyyyyzzzzzzzzw\r\n",
                "output": "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n"
            },
            {
                "input": "200\r\naaabbsbbbbbbbbbbbbbcccccccccdddddddddddddeeeeeeeeffffffffgggggggggghhhhhhhhhhhhijjjjjjjjjjkkkkkkllllmmmmmnnnnnnoooooooppppppqqqqqqqqqqqqrrrrrsssssssssttttttuuuuuuvvvvvvvvvwwwwwwxxxxxxyyyyyyzzzzzzzzzzz\r\n",
                "output": "YES\n00000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000\n"
            },
            {
                "input": "200\r\njaaaabbbbbbccccccccccccdddddddddddeeeeeeffffffggggghhhhhhhiiiijjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmnnnooooppppppqqqqqqqqqqqqqqrrrrrrrrrrrrsssssttttttuuuuuuuvvvvvwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzz\r\n",
                "output": "YES\n01111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n"
            },
            {
                "input": "200\r\nzywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\r\n",
                "output": "NO\n"
            },
            {
                "input": "200\r\ntoimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\r\n",
                "output": "NO\n"
            },
            {
                "input": "200\r\nndwpatpnvwldptairxlxqmzzysfvglpjkwbebtosqvfnoebfvxfpupvohcaazsjbdshoducigmfoqzltdgvmdmputqmoaqscilmtafqrxdunwnijhrtbwonpvpeouednmjswhauahmgyozmbiilxxflkkmwywvuojbrwwbkyhxtdywiktkfcsmozklhrwlwyajekejrx\r\n",
                "output": "NO\n"
            },
            {
                "input": "200\r\nftiqlgirbkmlpzkthoivcifhflyietxsfiwiojenqgxrnetzutdsyfuhrbfpedyksfzuvnqonbyydogbrwsfuuivboanufitbjngppagzfgqwyroaofcdgrwoxwfpvcgzdnkhnwtlavnoppdbddpfpcaaipdcqskcqtccrrspvjyqpvjwziexnmmnlqvacdpgnzzhude\r\n",
                "output": "NO\n"
            },
            {
                "input": "9\r\nbefblmbhg\r\n",
                "output": "NO\n"
            },
            {
                "input": "9\r\nabcabcabc\r\n",
                "output": "NO\n"
            },
            {
                "input": "4\r\ndcda\r\n",
                "output": "NO\n"
            },
            {
                "input": "37\r\nxxxxxxxxxxxxxaaaaaaaaaaaccccccccccacx\r\n",
                "output": "NO\n"
            },
            {
                "input": "1\r\na\r\n",
                "output": "YES\n0\n"
            },
            {
                "input": "6\r\nqdlrhw\r\n",
                "output": "NO\n"
            },
            {
                "input": "3\r\nedc\r\n",
                "output": "NO\n"
            },
            {
                "input": "4\r\ncbca\r\n",
                "output": "NO\n"
            },
            {
                "input": "5\r\nadcbz\r\n",
                "output": "NO\n"
            },
            {
                "input": "5\r\ncbbda\r\n",
                "output": "NO\n"
            },
            {
                "input": "4\r\nhcha\r\n",
                "output": "NO\n"
            },
            {
                "input": "4\r\nzcza\r\n",
                "output": "NO\n"
            },
            {
                "input": "6\r\ncbaabc\r\n",
                "output": "NO\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    // const n = readline();\n \n    // Array(Number(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    //\n    // var map = {}\n    var [n, a, b, k] = readline().split(' ').map((x, i) => {\n        return parseInt(x)\n    })\n \n    var array = readline().split(' ').map((x, i) => {\n \n        return parseInt(x)\n    })\n    var res = new Array(n)\n    var aa = 0\n    for (let i = 0; i < n; i++) {\n        // aa = array[i]\n        if (array[i] % (a + b) === 0) {\n            res[i] = Math.ceil((a + b) / a) - 1\n        } else {\n            aa = array[i] % (a + b)\n            // console.log(array[i], Math.ceil(aa / a))\n            res[i] = Math.ceil(aa / a) - 1\n        }\n    }\n    res = res.sort((a, b) => a - b)\n    var ans = 0\n    var kk = k\n    for (let i = 0; i < n; i++) {\n        if (res[i] <= 0) {\n            ans++\n            continue\n        }\n        if (kk >= res[i]) {\n            ans++\n            kk -= res[i]\n        }\n    }\n    // console.log(res)\n    console.log(ans)\n    // console.log(kk)\n    // console.log(dp)\n}\n ",
        "tests": [
            {
                "input": "6 2 3 3\r\n7 10 50 12 1 8\r\n",
                "output": "5\n"
            },
            {
                "input": "1 1 100 99\r\n100\r\n",
                "output": "1\n"
            },
            {
                "input": "7 4 2 1\r\n1 3 5 4 2 7 6\r\n",
                "output": "6\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const n = readline();\n \n    // Array(Number(x)).fill(1).map((t, iii) => {\n    // var n = parseInt(readline())\n    //\n    // var map = {}\n    var a = readline().split(' ').map((x, i) => {\n        return parseInt(x)\n    })\n    var map = new Array(a.length)\n \n    var b = readline().split(' ').map((x, i) => {\n        map[i] = {a: a[i], b: parseInt(x)}\n \n        return parseInt(x)\n    })\n    // console.log(map)\n \n    map = map.sort((x, y) => (x.a - x.b) - (y.a - y.b))\n \n    var l = 0\n    var answer = 0\n    for (var i = 0; i < map.length; i++) {\n        var current = map[i]\n        l = i + 1\n        var r = map.length\n \n \n        while (l < r) {\n            var m = Math.floor((l + r) / 2)\n            if (map[m].a - map[m].b + current.a - current.b <= 0) {\n                l = m+1\n            } else r=m\n        }\n        answer += n-r\n        // console.log(answer, l,r, current, i)\n \n    }\n    // console.log(map)\n    console.log(answer)\n}\n ",
        "tests": [
            {
                "input": "5\r\n4 8 2 6 2\r\n4 5 4 1 3\r\n",
                "output": "7\n"
            },
            {
                "input": "4\r\n1 3 2 4\r\n1 3 2 4\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    var x = Number(readline())\n    Array(Number(x)).fill(1).map((t, i) => {\n        var n = Number(readline())\n        var a = readline().split(' ').map((x, i) => {\n            return Number(x)\n        })\n \n        var dp = new Array(n + 2).fill(0)\n        for (var i = 0; i < n + 2; i++) {\n            dp[i] = new Array(3).fill(0)\n        }\n        // var sumN = 0\n        // for (var i = 0; i < n+2; i++) {\n        //     sumN+=a[]\n        //     dp[i] = new Array(3).fill(0)\n        // }\n        for (var i = 0; i < n; i++) {\n            var max1 = Math.max(dp[i][0], dp[i][1])\n            var max2 = Math.max(max1, dp[i][2])\n            dp[i+1][0] = Math.max(dp[i+1][0], dp[i][0] + (i % 2===0 ? a[i] : 0))\n            dp[i+2][1] = Math.max(dp[i+1][0], max1 + (i % 2===0 ? a[i+1] : a[i]))\n            dp[i+1][2] = Math.max(dp[i+1][0], max2 + (i % 2===0 ? a[i] : 0))\n        }\n        var answer = 0\n        // console.log(a)\n        // console.log(dp)\n        for (var i = 0; i < 3; i++) {\n            answer = Math.max(answer, dp[n][i])\n        }\n        console.log(answer)\n    })\n \n}\n \nfunction gcd(a, b) {\n    if (!b) {\n        return a;\n    }\n \n    return gcd(b, a % b);\n}\n \n \n ",
        "tests": [
            {
                "input": "4\r\n8\r\n1 7 3 4 7 6 2 9\r\n5\r\n1 2 1 2 1\r\n10\r\n7 8 4 5 7 6 8 9 7 3\r\n4\r\n3 1 2 1\r\n",
                "output": "26\n5\n37\n5\n"
            },
            {
                "input": "3\r\n5\r\n17 6 4 4 4\r\n7\r\n19 5 13 11 12 13 5\r\n1\r\n213567876\r\n",
                "output": "27\n57\n213567876\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n \n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, i) => {\n        var n = Number(readline())\n \n        var a = new Array(n + 1)\n        readline().split('').map((x, i) => {\n            // if (minA > Number(x)) minA = Number(x)\n            a[i + 1] = parseInt(x)\n            // return parseInt(x)\n        })\n        var sum = {0:1}\n        var s = 0\n        var answer = 0\n        for (var i = 1; i <= n; i++) {\n            s += a[i]\n            // console.log(s - i)\n            if (sum[s - i] === undefined) {\n                sum[s - i] = 0\n            }\n            answer += sum[s - i]\n \n            sum[s - i] += 1\n        }\n        // console.log(a)\n        // console.log(sum)\n        console.log(answer)\n    })\n}\n ",
        "tests": [
            {
                "input": "3\r\n3\r\n120\r\n5\r\n11011\r\n6\r\n600005\r\n",
                "output": "3\n6\n1\n"
            },
            {
                "input": "11\r\n1\r\n0\r\n1\r\n1\r\n1\r\n2\r\n1\r\n3\r\n1\r\n4\r\n1\r\n5\r\n1\r\n6\r\n1\r\n7\r\n1\r\n8\r\n1\r\n9\r\n26\r\n11140000000090000000002111\r\n",
                "output": "0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n37\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\nvar module = 1000000007\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n \n    var s = readline()\n    var n = s.length\n \n    console.log(3)\n    console.log('R', n - 1)\n    console.log('L', n)\n    console.log('L', 2)\n}\n \nfunction P(p) {\n    var a = 1\n    for (var i = 1; i <= p; i++) {\n        a = (a * i) % module\n    }\n    return a\n}\n \nfunction PC(k, p) {\n    var a = 1\n    for (var i = p - k + 1; i <= p; i++) {\n        a = (a * i) % module\n    }\n    return a\n}\n \nfunction C(k, n) {\n    if (k > n) return 0\n    var bottom = PC(k, n)\n    // var up = P(n) % module\n    // console.log(up)\n    return bottom\n}\n ",
        "tests": [
            {
                "input": "abac\r\n",
                "output": "3\nR 3\nL 4\nL 2\n"
            },
            {
                "input": "acccc\r\n",
                "output": "3\nR 4\nL 5\nL 2\n"
            },
            {
                "input": "hannah\r\n",
                "output": "3\nR 5\nL 6\nL 2\n"
            },
            {
                "input": "vux\r\n",
                "output": "3\nR 2\nL 3\nL 2\n"
            },
            {
                "input": "evmo\r\n",
                "output": "3\nR 3\nL 4\nL 2\n"
            },
            {
                "input": "nxccb\r\n",
                "output": "3\nR 4\nL 5\nL 2\n"
            },
            {
                "input": "vyppyq\r\n",
                "output": "3\nR 5\nL 6\nL 2\n"
            },
            {
                "input": "eaebyud\r\n",
                "output": "3\nR 6\nL 7\nL 2\n"
            },
            {
                "input": "mcrpwaao\r\n",
                "output": "3\nR 7\nL 8\nL 2\n"
            },
            {
                "input": "vdgcwgxbh\r\n",
                "output": "3\nR 8\nL 9\nL 2\n"
            },
            {
                "input": "ittmcsvmoa\r\n",
                "output": "3\nR 9\nL 10\nL 2\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\nvar module = 1000000007\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n \n    var [n, x, pos] = readline().split(' ').map((x, i) => {\n        if (i === 2) return Number(x)\n        if (i === 0) return Number(x)\n        // if (minA > Number(x)) minA = Number(x)\n        return Number(x)\n    })\n \n    var lower = x - 1\n    var higher = n - x\n    var ans = 1n\n \n    var r = n\n    var l = 0\n    var mid = 0\n    var count = 0\n    while (l < r) {\n        mid = Math.floor((l + r) / 2)\n        // console.log(l, r)\n        // console.log(mid, pos)\n        if (mid <= pos) {\n            if (mid !== pos) {\n                ans = (ans * BigInt(lower)) % BigInt(module)\n                lower--\n            }\n            l = mid + 1\n        }\n        if (mid > pos) {\n            ans = (ans * BigInt(higher)) % BigInt(module)\n            higher--\n            r = mid\n        }\n        count++\n    }\n    if (count < n) ans = (BigInt(P(n - count)) * ans) % BigInt(module)\n    console.log(ans.toString())\n    // 1 1 7\n    // 6 9, 15, 18\n}\n \nfunction P(p) {\n    var a = 1\n    for (var i = 1; i <= p; i++) {\n        a = (a * i) % module\n    }\n    return a\n}\n \nfunction PC(k, p) {\n    var a = 1\n    for (var i = p - k + 1; i <= p; i++) {\n        a = (a * i) % module\n    }\n    return a\n}\n \nfunction C(k, n) {\n    if (k > n) return 0\n    var bottom = PC(k, n)\n    // var up = P(n) % module\n    // console.log(up)\n    return bottom\n}\n ",
        "tests": [
            {
                "input": "4 1 2\r\n",
                "output": "6\n"
            },
            {
                "input": "123 42 24\r\n",
                "output": "824071958\n"
            },
            {
                "input": "1 1 0\r\n",
                "output": "1\n"
            },
            {
                "input": "1000 501 501\r\n",
                "output": "646597996\n"
            },
            {
                "input": "1000 999 799\r\n",
                "output": "0\n"
            },
            {
                "input": "2 1 1\r\n",
                "output": "1\n"
            },
            {
                "input": "2 2 0\r\n",
                "output": "0\n"
            },
            {
                "input": "3 1 2\r\n",
                "output": "0\n"
            },
            {
                "input": "3 2 2\r\n",
                "output": "1\n"
            },
            {
                "input": "3 3 1\r\n",
                "output": "0\n"
            },
            {
                "input": "4 2 0\r\n",
                "output": "2\n"
            },
            {
                "input": "4 3 2\r\n",
                "output": "2\n"
            },
            {
                "input": "4 4 3\r\n",
                "output": "6\n"
            },
            {
                "input": "7 1 1\r\n",
                "output": "720\n"
            },
            {
                "input": "7 7 6\r\n",
                "output": "720\n"
            },
            {
                "input": "7 2 4\r\n",
                "output": "120\n"
            },
            {
                "input": "7 4 4\r\n",
                "output": "216\n"
            },
            {
                "input": "8 4 1\r\n",
                "output": "1440\n"
            },
            {
                "input": "8 1 5\r\n",
                "output": "0\n"
            },
            {
                "input": "8 8 7\r\n",
                "output": "5040\n"
            },
            {
                "input": "8 7 6\r\n",
                "output": "720\n"
            },
            {
                "input": "8 3 0\r\n",
                "output": "1440\n"
            },
            {
                "input": "9 1 7\r\n",
                "output": "0\n"
            },
            {
                "input": "9 9 5\r\n",
                "output": "0\n"
            },
            {
                "input": "9 5 5\r\n",
                "output": "5760\n"
            },
            {
                "input": "9 4 4\r\n",
                "output": "7200\n"
            },
            {
                "input": "9 3 3\r\n",
                "output": "8640\n"
            },
            {
                "input": "10 1 1\r\n",
                "output": "362880\n"
            },
            {
                "input": "10 10 9\r\n",
                "output": "362880\n"
            },
            {
                "input": "10 5 5\r\n",
                "output": "43200\n"
            },
            {
                "input": "10 3 7\r\n",
                "output": "70560\n"
            },
            {
                "input": "10 4 4\r\n",
                "output": "90720\n"
            },
            {
                "input": "10 6 6\r\n",
                "output": "43200\n"
            },
            {
                "input": "10 7 7\r\n",
                "output": "90720\n"
            },
            {
                "input": "10 9 5\r\n",
                "output": "0\n"
            },
            {
                "input": "74 16 54\r\n",
                "output": "625981152\n"
            },
            {
                "input": "63 15 45\r\n",
                "output": "581829795\n"
            },
            {
                "input": "54 4 47\r\n",
                "output": "911648281\n"
            },
            {
                "input": "92 22 62\r\n",
                "output": "628152721\n"
            },
            {
                "input": "82 15 14\r\n",
                "output": "187724629\n"
            },
            {
                "input": "91 60 48\r\n",
                "output": "233776714\n"
            },
            {
                "input": "91 51 5\r\n",
                "output": "660447677\n"
            },
            {
                "input": "70 45 16\r\n",
                "output": "578976138\n"
            },
            {
                "input": "61 21 16\r\n",
                "output": "516359078\n"
            },
            {
                "input": "61 29 15\r\n",
                "output": "252758304\n"
            },
            {
                "input": "69 67 68\r\n",
                "output": "736622722\n"
            },
            {
                "input": "59 40 1\r\n",
                "output": "384105577\n"
            },
            {
                "input": "98 86 39\r\n",
                "output": "132656801\n"
            },
            {
                "input": "97 89 29\r\n",
                "output": "673334741\n"
            },
            {
                "input": "78 66 16\r\n",
                "output": "703501645\n"
            },
            {
                "input": "777 254 720\r\n",
                "output": "57449468\n"
            },
            {
                "input": "908 216 521\r\n",
                "output": "601940707\n"
            },
            {
                "input": "749 158 165\r\n",
                "output": "849211382\n"
            },
            {
                "input": "535 101 250\r\n",
                "output": "111877808\n"
            },
            {
                "input": "665 5 305\r\n",
                "output": "400272219\n"
            },
            {
                "input": "856 406 675\r\n",
                "output": "663368144\n"
            },
            {
                "input": "697 390 118\r\n",
                "output": "844062514\n"
            },
            {
                "input": "539 246 0\r\n",
                "output": "410139856\n"
            },
            {
                "input": "669 380 461\r\n",
                "output": "921432102\n"
            },
            {
                "input": "954 325 163\r\n",
                "output": "917113541\n"
            },
            {
                "input": "646 467 58\r\n",
                "output": "214437899\n"
            },
            {
                "input": "542 427 258\r\n",
                "output": "830066531\n"
            },
            {
                "input": "562 388 191\r\n",
                "output": "935998075\n"
            },
            {
                "input": "958 817 269\r\n",
                "output": "513948977\n"
            },
            {
                "input": "1000 888 888\r\n",
                "output": "644649893\n"
            },
            {
                "input": "1000 2 2\r\n",
                "output": "22779421\n"
            },
            {
                "input": "534 376 180\r\n",
                "output": "984450056\n"
            },
            {
                "input": "1000 1 1\r\n",
                "output": "756641425\n"
            },
            {
                "input": "1000 3 3\r\n",
                "output": "606772288\n"
            },
            {
                "input": "1000 500 500\r\n",
                "output": "646597996\n"
            },
            {
                "input": "1000 1000 999\r\n",
                "output": "756641425\n"
            },
            {
                "input": "1000 501 50\r\n",
                "output": "636821580\n"
            },
            {
                "input": "6 4 3\r\n",
                "output": "12\n"
            },
            {
                "input": "3 2 1\r\n",
                "output": "1\n"
            },
            {
                "input": "100 5 50\r\n",
                "output": "469732450\n"
            },
            {
                "input": "999 490 499\r\n",
                "output": "998308393\n"
            },
            {
                "input": "7 3 3\r\n",
                "output": "288\n"
            },
            {
                "input": "10 7 5\r\n",
                "output": "4320\n"
            },
            {
                "input": "123 1 24\r\n",
                "output": "0\n"
            },
            {
                "input": "5 5 2\r\n",
                "output": "0\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n \n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, i) => {\n        var [a, b] = readline().split(' ').map((x, i) => {\n            // if (i === 1) return Number(x)\n            // if (minA > Number(x)) minA = Number(x)\n            return BigInt(x)\n        })\n \n        var dividerA\n        // console.log(dividerA)\n        // for (var i = 0; i < dividerA.length; i++) {\n        var max = 0n\n        var value = 1\n        if (a % b !== 0n) return console.log(a.toString())\n        var factor = 1n\n        var aa = a\n        while (factor * factor <= b) {\n            if (b % factor === 0n) {\n                value = a / factor\n                aa = a\n                while (factor !== 1n && aa % factor === 0n) {\n                    // console.log(aa)\n                    value = aa / factor\n \n                    if (aa % factor === 0n && (aa / factor) % b !== 0n && value > max) {\n                        max = value\n                    }\n                    aa = aa / factor\n                }\n                factor = b / factor\n                aa = a\n \n                while (factor !== 1n && aa % factor === 0n) {\n                    // console.log(aa)\n                    value = aa / factor\n \n                    if (aa % factor === 0n && (aa / factor) % b !== 0n && value > max) {\n                        max = value\n                    }\n                    aa = aa / factor\n                }\n                factor = b / factor\n \n                //\n                // value = a / (b / factor)\n                //\n                // if (a % (b / factor) === 0n && value % b !== 0n && value > max) {\n                //\n                //     max = value\n                // }\n            }\n            factor = factor + 1n\n        }\n \n        console.log(max.toString())\n        // console.log(b)\n// console.log(array)\n \n        // if (answer) return console.log('YES')\n        // return console.log('NO')\n \n    })\n}\n ",
        "tests": [
            {
                "input": "3\r\n10 4\r\n12 6\r\n179 822\r\n",
                "output": "10\n4\n179\n"
            },
            {
                "input": "10\r\n246857872446986130 713202678\r\n857754240051582063 933416507\r\n873935277189052612 530795521\r\n557307185726829409 746530097\r\n173788420792057536 769449696\r\n101626841876448103 132345797\r\n598448092106640578 746411314\r\n733629261048200000 361714100\r\n981271355542147402 38\r\n559754147245184151 431517529\r\n",
                "output": "123428936223493065\n918940509\n37932865019708\n1\n57929473597352512\n767888699\n299224046053320289\n31896924393400000\n490635677771073701\n26946235365387\n"
            },
            {
                "input": "10\r\n228282288 228282288\r\n1000000000000000000 1000000000\r\n1244094302301841 35271721\r\n998005893107997601 999002449\r\n999999874000003969 999999937\r\n956980859148255595 5\r\n1 323\r\n1 1000000000\r\n424001357601318819 537974673\r\n100000000 1000000000\r\n",
                "output": "114141144\n976562500000000\n5939\n31607\n1\n191396171829651119\n1\n1\n424001357601318819\n100000000\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    var answer = []\n \n    // 1 1 7\n    // 6 9, 15, 18\n    var n = Number(readline());\n    var [a1, a2, a3] = readline().split(' ').map((x, i) => {\n        return Number(x)\n    });\n    var [b1, b2, b3] = readline().split(' ').map((x, i) => {\n        return Number(x)\n    });\n \n    var min1 = 100000000\n    var min2= 100000000\n    var min3= 100000000\n    var answer = 100000000\n \n    var min = Math.max(0,a1-b1-b3)+Math.max(0,a2-b1-b2)+Math.max(0,a3-b3-b2)\n    var max = Math.min(b2,a1)+Math.min(b3,a2)+Math.min(b1,a3)\n        console.log(min,  max)\n        // console.log(max)\n    // answer = Math.min(answer,min3)\n    // answer = Math.max(answer,0)\n    // console.log(answer)\n}\n \nfunction gcd(a, b) {\n    if (!b) {\n        return a;\n    }\n \n    return gcd(b, a % b);\n}\n \n \n ",
        "tests": [
            {
                "input": "2\r\n0 1 1\r\n1 1 0\r\n",
                "output": "0 1\n"
            },
            {
                "input": "15\r\n5 5 5\r\n5 5 5\r\n",
                "output": "0 15\n"
            },
            {
                "input": "3\r\n0 0 3\r\n3 0 0\r\n",
                "output": "3 3\n"
            },
            {
                "input": "686\r\n479 178 29\r\n11 145 530\r\n",
                "output": "22 334\n"
            },
            {
                "input": "319\r\n10 53 256\r\n182 103 34\r\n",
                "output": "119 226\n"
            },
            {
                "input": "47\r\n14 21 12\r\n30 9 8\r\n",
                "output": "0 29\n"
            },
            {
                "input": "94317\r\n66277 24448 3592\r\n3499 24653 66165\r\n",
                "output": "0 52600\n"
            },
            {
                "input": "37184\r\n3965 12513 20706\r\n436 6945 29803\r\n",
                "output": "5132 16914\n"
            },
            {
                "input": "1000000000\r\n1000000000 0 0\r\n0 1000000000 0\r\n",
                "output": "1000000000 1000000000\n"
            },
            {
                "input": "1000000000\r\n0 1000000000 0\r\n0 0 1000000000\r\n",
                "output": "1000000000 1000000000\n"
            },
            {
                "input": "1000000000\r\n0 0 1000000000\r\n1000000000 0 0\r\n",
                "output": "1000000000 1000000000\n"
            },
            {
                "input": "1000000000\r\n0 1000000000 0\r\n1 1 999999998\r\n",
                "output": "999999998 999999998\n"
            },
            {
                "input": "29912\r\n24063 5489 360\r\n10100 9805 10007\r\n",
                "output": "3956 15654\n"
            },
            {
                "input": "57836\r\n19314 19091 19431\r\n40680 14990 2166\r\n",
                "output": "2275 36587\n"
            },
            {
                "input": "36\r\n18 12 6\r\n21 14 1\r\n",
                "output": "0 21\n"
            },
            {
                "input": "364\r\n293 64 7\r\n115 122 127\r\n",
                "output": "51 193\n"
            },
            {
                "input": "1000000000\r\n89297275 846134561 64568164\r\n663031642 222246870 114721488\r\n",
                "output": "0 268586927\n"
            },
            {
                "input": "961732220\r\n361581771 179093036 421057413\r\n184611622 34898801 742221797\r\n",
                "output": "0 398603459\n"
            },
            {
                "input": "205079872\r\n12699844 177323781 15056247\r\n56986814 62976260 85116798\r\n",
                "output": "57360707 112872889\n"
            },
            {
                "input": "931934723\r\n512340462 202375672 217218589\r\n24862054 655510760 251561909\r\n",
                "output": "235916499 739578188\n"
            },
            {
                "input": "973380539\r\n83033196 192609087 697738256\r\n24124463 193317122 755938954\r\n",
                "output": "0 299766746\n"
            },
            {
                "input": "611719383\r\n414247349 142086484 55385550\r\n24922319 472027283 114769781\r\n",
                "output": "274555249 553939449\n"
            },
            {
                "input": "992526155\r\n514620001 200095684 277810470\r\n589233536 389331163 13961456\r\n",
                "output": "0 681103089\n"
            },
            {
                "input": "752809980\r\n85459976 476485751 190864253\r\n4588621 108831435 639389924\r\n",
                "output": "363065695 566534348\n"
            },
            {
                "input": "1000000000\r\n156489182 145117627 698393191\r\n584283682 217785715 197930603\r\n",
                "output": "282676873 885890491\n"
            },
            {
                "input": "664021061\r\n425727725 96184317 142109019\r\n463569859 164060143 36391059\r\n",
                "output": "0 342560221\n"
            },
            {
                "input": "296306745\r\n111213479 36570381 148522885\r\n728762 22073176 273504807\r\n",
                "output": "13768443 59372319\n"
            },
            {
                "input": "211951290\r\n5585468 170363369 36002453\r\n12947451 176703278 22300561\r\n",
                "output": "0 40833480\n"
            },
            {
                "input": "549443692\r\n382737848 16796163 149909681\r\n81990150 441109182 26344360\r\n",
                "output": "274403338 481524161\n"
            },
            {
                "input": "883777408\r\n404639975 309590423 169547010\r\n24150042 840092059 19535307\r\n",
                "output": "360954626 448325324\n"
            },
            {
                "input": "492014327\r\n28667608 206260838 257085881\r\n403185309 83153498 5675520\r\n",
                "output": "168256863 291429009\n"
            },
            {
                "input": "130891927\r\n10581814 13979481 106330632\r\n73152071 41478868 16260988\r\n",
                "output": "48590776 97713366\n"
            },
            {
                "input": "1000000000\r\n669793172 146615543 183591285\r\n12476313 9942391 977581296\r\n",
                "output": "124196839 169034247\n"
            },
            {
                "input": "719072390\r\n55824972 654496367 8751051\r\n136903854 477745400 104423136\r\n",
                "output": "39847113 168999159\n"
            },
            {
                "input": "812921941\r\n215642936 426179427 171099578\r\n6655875 797933401 8332665\r\n",
                "output": "200654396 230631476\n"
            },
            {
                "input": "897080525\r\n48313410 325560013 523207102\r\n26603375 25593102 844884048\r\n",
                "output": "273363536 377756490\n"
            },
            {
                "input": "435492892\r\n15292602 16025347 404174943\r\n262685515 5562121 167245256\r\n",
                "output": "231367566 284272983\n"
            },
            {
                "input": "801879784\r\n285055113 483389014 33435657\r\n196515621 548035465 57328698\r\n",
                "output": "31210794 375819468\n"
            },
            {
                "input": "337749994\r\n88786600 10360072 238603322\r\n126215625 187556752 23977617\r\n",
                "output": "27068953 225362297\n"
            },
            {
                "input": "835152660\r\n4019491 8720352 822412817\r\n95025620 238071137 502055903\r\n",
                "output": "82285777 107765463\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    var answer = []\n \n    // 1 1 7\n    // 6 9, 15, 18\n        var n = Number(readline());\n        var array = readline().split(' ').map((x, i) => {\n            return Number(x)\n        });\n \n        var sumArray = {}\n        sumArray[array[0]] = 1\n        var sum = array[0]\n        var answer = 0\n        for (var i = 1; i < n; i++) {\n            sum = sum + array[i]\n            // console.log(sumArray)\n            // console.log(sum)\n            if (sumArray[sum] || sum === 0) {\n                answer++\n                sumArray = {}\n                sumArray[array[i]] = 1\n                sum = array[i]\n            } else {\n                sumArray[sum] = 1\n            }\n            // console.log(answer)\n \n        }\n        console.log(answer)\n}\n \nfunction gcd(a, b) {\n    if (!b) {\n        return a;\n    }\n \n    return gcd(b, a % b);\n}\n \n \n ",
        "tests": [
            {
                "input": "4\r\n1 -5 3 2\r\n",
                "output": "1\n"
            },
            {
                "input": "5\r\n4 -2 3 -9 2\r\n",
                "output": "0\n"
            },
            {
                "input": "9\r\n-1 1 -1 1 -1 1 1 -1 -1\r\n",
                "output": "6\n"
            },
            {
                "input": "8\r\n16 -5 -11 -15 10 5 4 -4\r\n",
                "output": "3\n"
            },
            {
                "input": "2\r\n1000000000 1000000000\r\n",
                "output": "0\n"
            },
            {
                "input": "2\r\n-1000000000 -1000000000\r\n",
                "output": "0\n"
            },
            {
                "input": "2\r\n1000000000 -1000000000\r\n",
                "output": "1\n"
            },
            {
                "input": "2\r\n-1000000000 1000000000\r\n",
                "output": "1\n"
            },
            {
                "input": "3\r\n1000000000 1000000000 1000000000\r\n",
                "output": "0\n"
            },
            {
                "input": "100\r\n-1 -1 1 -1 -1 -1 1 1 1 -1 1 -1 1 1 1 1 1 -1 -1 1 1 -1 1 1 1 -1 -1 -1 -1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 1 1 1 -1 1 -1 1 1 -1 -1 1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 -1 1 1 1 1 -1 -1\r\n",
                "output": "46\n"
            },
            {
                "input": "100\r\n2 1 -2 -1 -2 -1 -2 1 2 1 -2 -1 -2 2 1 -2 -2 2 -2 2 -2 2 2 -1 -2 2 -1 -1 -2 -1 -2 2 -2 -2 -2 -1 1 -2 -1 2 -1 -2 1 -1 1 1 2 -2 1 -2 1 2 2 -2 1 -2 -1 -1 -2 -2 1 -1 -1 2 2 -1 2 1 -1 2 2 1 1 1 -1 -1 1 -2 -2 2 -1 2 -2 2 -2 -1 -2 -2 -1 -1 2 -2 -2 1 1 -2 -1 -2 -2 2\r\n",
                "output": "34\n"
            },
            {
                "input": "100\r\n1 -4 -1 4 -2 -2 -4 -2 -1 -3 -4 -4 2 -1 -2 1 4 1 -4 -2 3 2 3 2 2 4 3 4 -2 3 2 -4 -1 -3 3 1 4 -3 2 4 -1 3 1 4 4 -3 -3 3 -2 3 -2 4 -2 -3 4 4 3 1 2 1 -4 4 4 -1 2 4 -3 -3 -1 -2 2 -2 3 -3 -4 -3 -2 2 3 1 4 2 3 3 2 -2 3 -4 1 2 1 4 -2 -3 -2 1 1 3 3 1\r\n",
                "output": "19\n"
            },
            {
                "input": "100\r\n2 -3 1 -1 2 1 -2 3 -2 -3 2 2 -3 -3 2 1 3 1 2 -2 2 3 1 2 -3 1 -3 2 -3 -1 2 -3 2 -1 1 1 -2 -3 -1 -3 -3 2 2 1 1 2 -1 3 2 -1 -2 -1 3 -2 3 -1 3 1 -2 2 -3 -3 -3 -2 2 1 -1 2 1 -1 1 1 -1 -2 -2 3 -1 1 -2 2 1 -1 -2 2 3 -2 -3 1 2 3 -1 -1 1 -3 -1 -1 3 3 -1 -3\r\n",
                "output": "32\n"
            },
            {
                "input": "100\r\n-6 2 8 -9 -9 3 -3 -2 7 3 2 -2 -9 -7 -10 -9 10 4 5 -9 8 -5 7 -2 6 -2 4 4 -2 -5 6 4 8 -8 9 7 -4 2 -3 7 4 -10 -7 -4 8 2 10 -8 -3 -8 -5 -5 -10 -6 -8 -5 7 -1 7 -5 9 10 3 5 10 -7 -3 -7 1 -5 -8 5 1 -1 4 10 2 6 -4 9 3 10 -5 -10 -10 -2 1 9 10 1 10 2 8 -3 -3 -1 7 -5 8 -4\r\n",
                "output": "11\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n    var answer = []\n \n    // console.log(Number(x))\n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, i) => {\n        var [n] = readline().split(' ').map(x => Number(x));\n \n        // console.log(distance)\n        var factorMax = getDivisorsCnt(n).factorMax\n        var max = getDivisorsCnt(n).max\n        if(max === 1) {\n            console.log(1)\n            console.log(n)\n            return\n        }\n        // console.log(max)\n        var array = []\n        for(var i =0;i<max-1;i++){\n            array.push(factorMax)\n            n = n/factorMax\n        }\n        array.push(n)\n        console.log(array.length)\n        console.log(array.join(' '))\n    })\n \n}\n \nfunction getDivisorsCnt(n) {\n \n    var max = 0\n    var factorMax = 0\n    var numDivisors = 1;\n    var factor = 2; // Candidate for prime factor of `n`\n \n    // If `n` is not a prime number then it must have one factor\n    // which is <= `sqrt(n)`, so we try these first:\n    while (factor * factor <= n) {\n        if (n % factor === 0) {\n            // `factor` is a prime factor of `n`, determine the exponent:\n            var exponent = 0;\n            do {\n                n /= factor;\n                exponent++;\n            } while (n % factor === 0)\n            // `factor^exponent` is one term in the prime factorization of n,\n            // this contributes as factor `exponent + 1`:\n            numDivisors *= exponent + 1;\n            if (exponent> max){\n                max = exponent\n                factorMax = factor\n            }\n        }\n        // Next possible prime factor:\n        factor = factor == 2 ? 3 : factor + 2\n    }\n \n    // Now `n` is either 1 or a prime number. In the latter case,\n    // it contributes a factor 2:\n    if (n > 1) {\n        numDivisors *= 2;\n    }\n    // console.log(factorMax, max)\n \n    return {factorMax, max};\n}",
        "tests": [
            {
                "input": "4\r\n2\r\n360\r\n4999999937\r\n4998207083\r\n",
                "output": "1\n2\n3\n2 2 90\n1\n4999999937\n1\n4998207083\n"
            },
            {
                "input": "1\r\n10000000000\r\n",
                "output": "10\n2 2 2 2 2 2 2 2 2 19531250\n"
            },
            {
                "input": "1\r\n8589934592\r\n",
                "output": "33\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"
            },
            {
                "input": "1\r\n9876543210\r\n",
                "output": "2\n3 3292181070\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n    var answer = []\n \n    // console.log(Number(x))\n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, i) => {\n        var [n, m] = readline().split(' ').map(x => Number(x));\n        var sum = 0\n        var sum2 = 0\n        var array2 = []\n        var k = readline().split(' ').map(x => {\n            return Number(x) - 1\n        });\n        var c = readline().split(' ').map(x => {\n            return Number(x)\n        });\n        k = k.sort((a, b) => b - a)\n        var sum = 0\n        var j = 0\n        k.map((x, i) => {\n            if (c[j] < c[x]) {\n                sum += c[j]\n                j++\n            } else {\n                sum += c[x]\n            }\n \n            // console.log(sum)\n \n        })\n \n        console.log(sum)\n \n    })\n \n \n}",
        "tests": [
            {
                "input": "2\r\n5 4\r\n2 3 4 3 2\r\n3 5 12 20\r\n5 5\r\n5 4 3 2 1\r\n10 40 90 160 250\r\n",
                "output": "30\n190\n"
            },
            {
                "input": "1\r\n1 1\r\n1\r\n1\r\n",
                "output": "1\n"
            },
            {
                "input": "8\r\n5 5\r\n1 1 1 1 1\r\n5 10 20 50 100\r\n10 10\r\n10 10 10 10 10 10 10 10 10 10\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n4 4\r\n4 3 2 1\r\n100 1000 100000 1000000000\r\n10 1\r\n1 1 1 1 1 1 1 1 1 1\r\n999999999\r\n1 10\r\n5\r\n2 3 9 30 566 1337 31337 70775 111111 413413\r\n5 5\r\n1 2 3 4 5\r\n10 40 90 160 250\r\n9 9\r\n5 3 4 2 4 3 5 4 3\r\n4 6 9 10 11 9999 1000000000 1000000000 1000000000\r\n3 3\r\n3 2 3\r\n100 200 400\r\n",
                "output": "25\n10000000000\n2200\n9999999990\n2\n190\n72\n500\n"
            },
            {
                "input": "1\r\n2 7\r\n7 3\r\n211047202 262703497 433933447 476190629 623690081 861648772 971407775\r\n",
                "output": "473750699\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \nfunction fair(x) {\n    var t = x\n    while (t !== 0n) {\n        var tt = t % 10n\n        if (tt !== 0n && x % tt !== 0n) return false\n        t = t / 10n\n    }\n    return true\n}\nfunction main() {\n    const x = readline();\n    var answer = []\n \n    // console.log(Number(x))\n    // 1 1 7\n    // 6 9, 15, 18\n    Array(Number(x)).fill(1).map((t, i) => {\n        var line = BigInt(readline());\n \n        // console.log(findMaxFigure(string))\n        while (!fair(line)) line = line + 1n\n \n        console.log(line.toString())\n    })\n}\n \n \n ",
        "tests": [
            {
                "input": "4\r\n1\r\n282\r\n1234567890\r\n1000000000000000000\r\n",
                "output": "1\n288\n1234568040\n1000000000000000000\n"
            },
            {
                "input": "100\r\n95\r\n94\r\n31\r\n65\r\n35\r\n95\r\n70\r\n78\r\n81\r\n36\r\n69\r\n97\r\n39\r\n28\r\n89\r\n62\r\n36\r\n23\r\n35\r\n21\r\n36\r\n11\r\n65\r\n39\r\n13\r\n34\r\n79\r\n87\r\n91\r\n70\r\n43\r\n82\r\n24\r\n97\r\n6\r\n87\r\n49\r\n81\r\n60\r\n92\r\n63\r\n9\r\n16\r\n6\r\n31\r\n90\r\n6\r\n5\r\n70\r\n48\r\n27\r\n86\r\n65\r\n66\r\n45\r\n8\r\n67\r\n17\r\n24\r\n44\r\n34\r\n93\r\n26\r\n32\r\n82\r\n54\r\n72\r\n83\r\n94\r\n81\r\n79\r\n79\r\n9\r\n9\r\n4\r\n59\r\n42\r\n83\r\n80\r\n67\r\n28\r\n62\r\n56\r\n58\r\n87\r\n67\r\n34\r\n3\r\n61\r\n14\r\n62\r\n19\r\n94\r\n31\r\n74\r\n97\r\n20\r\n70\r\n7\r\n98\r\n",
                "output": "99\n99\n33\n66\n36\n99\n70\n80\n88\n36\n70\n99\n40\n30\n90\n66\n36\n24\n36\n22\n36\n11\n66\n40\n15\n36\n80\n88\n99\n70\n44\n88\n24\n99\n6\n88\n50\n88\n60\n99\n66\n9\n20\n6\n33\n90\n6\n5\n70\n48\n30\n88\n66\n66\n48\n8\n70\n20\n24\n44\n36\n99\n30\n33\n88\n55\n77\n88\n99\n88\n80\n80\n9\n9\n4\n60\n44\n88\n80\n70\n30\n66\n60\n60\n88\n70\n36\n3\n66\n15\n66\n20\n99\n33\n77\n99\n20\n70\n7\n99\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n \n    main();\n});\n \nfunction readline() {\n    return inputString[currentLine++];\n}\n \n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n    const x = readline();\n    var answer = []\n \n    // console.log(Number(x))\n \n    var array = []\n    var array2 = []\n    var arrayValue = {}\n    array = combinations(\"123456789\")\n    array.map((x, i) => {\n        // if(i>3) return\n        array2 = x.split('')\n        array2 = array2.map(x => Number(x))\n// console.log(array2)\n//         console.log(array2.reduce((a, b) => a + b, 0))\n// console.log(x)\n        if (!arrayValue[array2.reduce((a, b) => a + b, 0)]) return arrayValue[array2.reduce((a, b) => a + b, 0)] = x\n        arrayValue[array2.reduce((a, b) => a + b, 0)] =\n            Math.min(Number(arrayValue[array2.reduce((a, b) => a + b, 0)]), Number(x))\n    })\n    // console.log(arrayValue)\n    Array(Number(x)).fill(1).map((t, i) => {\n        var x = Number(readline());\n        console.log(arrayValue[x] || -1)\n    })\n \n}\n \nfunction combinations(str) {\n    var fn = function (active, rest, a) {\n        if (!active && !rest)\n            return;\n        if (!rest) {\n            a.push(active);\n        } else {\n            fn(active + rest[0], rest.slice(1), a);\n            fn(active, rest.slice(1), a);\n        }\n        return a;\n    }\n    return fn(\"\", str, []);\n}\n ",
        "tests": [
            {
                "input": "4\r\n1\r\n5\r\n15\r\n50\r\n",
                "output": "1\n5\n69\n-1\n"
            },
            {
                "input": "50\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n",
                "output": "1\n2\n3\n4\n5\n6\n7\n8\n9\n19\n29\n39\n49\n59\n69\n79\n89\n189\n289\n389\n489\n589\n689\n789\n1789\n2789\n3789\n4789\n5789\n6789\n16789\n26789\n36789\n46789\n56789\n156789\n256789\n356789\n456789\n1456789\n2456789\n3456789\n13456789\n23456789\n123456789\n-1\n-1\n-1\n-1\n-1\n"
            },
            {
                "input": "50\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n",
                "output": "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n"
            },
            {
                "input": "50\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n",
                "output": "23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n"
            },
            {
                "input": "50\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n",
                "output": "1\n2\n3\n4\n5\n6\n7\n8\n9\n19\n29\n39\n49\n59\n69\n79\n89\n189\n289\n389\n489\n589\n689\n789\n1789\n2789\n3789\n4789\n5789\n6789\n16789\n26789\n36789\n46789\n56789\n156789\n256789\n356789\n456789\n1456789\n2456789\n3456789\n13456789\n23456789\n123456789\n-1\n-1\n-1\n-1\n-1\n"
            },
            {
                "input": "50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n",
                "output": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n"
            },
            {
                "input": "50\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n",
                "output": "2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n"
            },
            {
                "input": "50\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n42\r\n",
                "output": "3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n3456789\n"
            },
            {
                "input": "50\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n35\r\n",
                "output": "56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n56789\n"
            },
            {
                "input": "44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n44\r\n",
                "output": "23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n23456789\n"
            },
            {
                "input": "50\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n39\r\n",
                "output": "456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n456789\n"
            },
            {
                "input": "50\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n",
                "output": "1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n"
            },
            {
                "input": "50\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n",
                "output": "356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n356789\n"
            },
            {
                "input": "7\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n",
                "output": "3\n3\n3\n3\n3\n3\n3\n"
            },
            {
                "input": "50\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n43\r\n42\r\n44\r\n",
                "output": "23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n13456789\n3456789\n23456789\n"
            },
            {
                "input": "50\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n37\r\n",
                "output": "256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n256789\n"
            },
            {
                "input": "50\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n43\r\n45\r\n44\r\n",
                "output": "23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n13456789\n123456789\n23456789\n"
            },
            {
                "input": "50\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n42\r\n41\r\n",
                "output": "3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n3456789\n2456789\n"
            },
            {
                "input": "50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n46\r\n47\r\n48\r\n49\r\n50\r\n",
                "output": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n"
            },
            {
                "input": "50\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n29\r\n",
                "output": "5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n5789\n"
            },
            {
                "input": "50\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n46\r\n",
                "output": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n"
            },
            {
                "input": "40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n",
                "output": "1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n1456789\n"
            },
            {
                "input": "41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n41\r\n",
                "output": "2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n2456789\n"
            }
        ]
    },
    {
        "program": "'use strict';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n \nlet inputString = '';\nlet currentLine = 0;\n \nprocess.stdin.on('data', inputStdin => {\n  inputString += inputStdin;\n});\n \nprocess.stdin.on('end', _ => {\n  inputString = inputString.trim().split('\\n').map(string => {\n    return string.trim();\n  });\n \n  main();\n});\n \nfunction readline() {\n  return inputString[currentLine++];\n}\n// Make a Snippet for the code above this and then write your logic in main();\n \n \nfunction main() {\n  const x = readline();\n  var answer = []\n  Array(Number(x)).fill(1).map((t, i)=>{\n    var line2 = readline().split( ' ').map(x=>Number(x));\n    // console.log(typeof line2)\n    // line2 = line2.map(x=>Number(x))\n    if(Math.max(line2[0],line2[1]) === 0) return console.log(0)\n    if(line2[0] === line2[1]) return console.log(line2[1]*2)\n    console.log(Math.max(line2[0],line2[1])*2-1)\n    // answer[i] = Math.max(line2[0],line2[1])*2-1\n  })\n}\nfunction foo(x) {\n  // process.stdout.write(\"hello: \");   // without auto '\\n' (newline)\n \n  console.log(x);  // with auto '\\n' (newline)\n}",
        "tests": [
            {
                "input": "5\r\n5 5\r\n3 4\r\n7 1\r\n0 0\r\n2 0\r\n",
                "output": "10\n7\n13\n0\n3\n"
            },
            {
                "input": "100\r\n0 0\r\n0 1\r\n1 0\r\n1 1\r\n0 2\r\n1 2\r\n2 0\r\n2 1\r\n2 2\r\n0 3\r\n1 3\r\n2 3\r\n3 0\r\n3 1\r\n3 2\r\n3 3\r\n0 4\r\n1 4\r\n2 4\r\n3 4\r\n4 0\r\n4 1\r\n4 2\r\n4 3\r\n4 4\r\n0 5\r\n1 5\r\n2 5\r\n3 5\r\n4 5\r\n5 0\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n5 5\r\n0 6\r\n1 6\r\n2 6\r\n3 6\r\n4 6\r\n5 6\r\n6 0\r\n6 1\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n6 6\r\n0 7\r\n1 7\r\n2 7\r\n3 7\r\n4 7\r\n5 7\r\n6 7\r\n7 0\r\n7 1\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n7 6\r\n7 7\r\n0 8\r\n1 8\r\n2 8\r\n3 8\r\n4 8\r\n5 8\r\n6 8\r\n7 8\r\n8 0\r\n8 1\r\n8 2\r\n8 3\r\n8 4\r\n8 5\r\n8 6\r\n8 7\r\n8 8\r\n0 9\r\n1 9\r\n2 9\r\n3 9\r\n4 9\r\n5 9\r\n6 9\r\n7 9\r\n8 9\r\n9 0\r\n9 1\r\n9 2\r\n9 3\r\n9 4\r\n9 5\r\n9 6\r\n9 7\r\n9 8\r\n9 9\r\n",
                "output": "0\n1\n1\n2\n3\n3\n3\n3\n4\n5\n5\n5\n5\n5\n5\n6\n7\n7\n7\n7\n7\n7\n7\n7\n8\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n10\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n12\n13\n13\n13\n13\n13\n13\n13\n13\n13\n13\n13\n13\n13\n13\n14\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n15\n16\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n17\n18\n"
            }
        ]
    }
]